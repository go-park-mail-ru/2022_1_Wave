// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/login": {
            "post": {
                "description": "login user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "new jwt data",
                        "name": "UserForm",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/forms.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/forms.Result"
                        }
                    },
                    "460": {
                        "description": "Data is invalid",
                        "schema": {
                            "$ref": "#/definitions/forms.Result"
                        }
                    },
                    "521": {
                        "description": "Cannot create session",
                        "schema": {
                            "$ref": "#/definitions/forms.Result"
                        }
                    }
                }
            }
        },
        "/api/signUp": {
            "post": {
                "description": "sign in user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "SignUp",
                "parameters": [
                    {
                        "description": "new jwt data",
                        "name": "UserForm",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/forms.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/forms.Result"
                        }
                    },
                    "460": {
                        "description": "Data is invalid",
                        "schema": {
                            "$ref": "#/definitions/forms.Result"
                        }
                    },
                    "521": {
                        "description": "Cannot create session",
                        "schema": {
                            "$ref": "#/definitions/forms.Result"
                        }
                    }
                }
            }
        },
        "/api/signout": {
            "post": {
                "description": "sign in user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Logout",
                "parameters": [
                    {
                        "description": "new jwt data",
                        "name": "UserForm",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/forms.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/forms.Result"
                        }
                    },
                    "460": {
                        "description": "Data is invalid",
                        "schema": {
                            "$ref": "#/definitions/forms.Result"
                        }
                    },
                    "521": {
                        "description": "Cannot create session",
                        "schema": {
                            "$ref": "#/definitions/forms.Result"
                        }
                    }
                }
            }
        },
        "/api/v1/albums/": {
            "put": {
                "description": "updating album by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "album"
                ],
                "summary": "UpdateAlbum",
                "parameters": [
                    {
                        "description": "id of updating album and params of it.",
                        "name": "Album",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Album"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.Success"
                        }
                    },
                    "400": {
                        "description": "Data is invalid",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "405": {
                        "description": "Method is not allowed",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    }
                }
            },
            "post": {
                "description": "creating new album",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "album"
                ],
                "summary": "CreateAlbum",
                "parameters": [
                    {
                        "description": "params of new album. Id will be set automatically.",
                        "name": "Album",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Album"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.Success"
                        }
                    },
                    "400": {
                        "description": "Data is invalid",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "405": {
                        "description": "Method is not allowed",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    }
                }
            }
        },
        "/api/v1/albums/{id}": {
            "get": {
                "description": "getting album by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "album"
                ],
                "summary": "GetAlbum",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id of album which need to be getted",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Album"
                        }
                    },
                    "400": {
                        "description": "Data is invalid",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "405": {
                        "description": "Method is not allowed",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    }
                }
            },
            "delete": {
                "description": "deleting album by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "album"
                ],
                "summary": "DeleteAlbum",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id of album which need to be deleted",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.Success"
                        }
                    },
                    "400": {
                        "description": "Data is invalid",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "405": {
                        "description": "Method is not allowed",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    }
                }
            }
        },
        "/api/v1/artists/": {
            "put": {
                "description": "updating artist by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "artist"
                ],
                "summary": "UpdateArtist",
                "parameters": [
                    {
                        "description": "id of updating artist and params of it.",
                        "name": "Artist",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Artist"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.Success"
                        }
                    },
                    "400": {
                        "description": "Data is invalid",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "405": {
                        "description": "Method is not allowed",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    }
                }
            },
            "post": {
                "description": "creating new artist",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "artist"
                ],
                "summary": "CreateArtist",
                "parameters": [
                    {
                        "description": "params of new artist. Id will be set automatically.",
                        "name": "Artist",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Artist"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.Success"
                        }
                    },
                    "400": {
                        "description": "Data is invalid",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "405": {
                        "description": "Method is not allowed",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    }
                }
            }
        },
        "/api/v1/artists/{id}": {
            "get": {
                "description": "getting artist by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "artist"
                ],
                "summary": "GetArtist",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id of artist which need to be getted",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Artist"
                        }
                    },
                    "400": {
                        "description": "Data is invalid",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "405": {
                        "description": "Method is not allowed",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    }
                }
            },
            "delete": {
                "description": "deleting album by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "artist"
                ],
                "summary": "DeleteArtist",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id of artist which need to be deleted",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.Success"
                        }
                    },
                    "400": {
                        "description": "Data is invalid",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "405": {
                        "description": "Method is not allowed",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "forms.Result": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "example": "some status"
                }
            }
        },
        "forms.User": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "hello@example.com"
                },
                "id": {
                    "type": "integer",
                    "example": 5125112
                },
                "password": {
                    "type": "string",
                    "example": "1fsgh2rfafas"
                },
                "username": {
                    "type": "string",
                    "example": "Martin"
                }
            }
        },
        "models.Album": {
            "type": "object",
            "properties": {
                "Date": {
                    "type": "integer",
                    "example": 0
                },
                "authorId": {
                    "type": "integer",
                    "example": 121
                },
                "countLikes": {
                    "type": "integer",
                    "example": 54
                },
                "countListening": {
                    "type": "integer",
                    "example": 15632
                },
                "coverId": {
                    "type": "integer",
                    "example": 254
                },
                "id": {
                    "type": "integer",
                    "example": 777
                },
                "title": {
                    "type": "string",
                    "example": "Mercury"
                }
            }
        },
        "models.Artist": {
            "type": "object",
            "properties": {
                "countFollowers": {
                    "type": "integer",
                    "example": 1001
                },
                "countListening": {
                    "type": "integer",
                    "example": 7654
                },
                "id": {
                    "type": "integer",
                    "example": 43
                },
                "name": {
                    "type": "string",
                    "example": "Imagine Dragons"
                },
                "photo": {
                    "type": "string",
                    "example": "/public/artists/photo/imagineDragons.png"
                }
            }
        },
        "utils.Error": {
            "type": "object",
            "properties": {
                "err": {
                    "type": "string"
                }
            }
        },
        "utils.Success": {
            "type": "object",
            "properties": {
                "result": {
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register("swagger", &s{})
}
