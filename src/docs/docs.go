// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/albums/": {
            "get": {
                "description": "getting all albums",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "album"
                ],
                "summary": "GetAlbums",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.Success"
                        }
                    },
                    "400": {
                        "description": "Data is invalid",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "405": {
                        "description": "Method is not allowed",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    }
                }
            },
            "put": {
                "description": "updating album by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "album"
                ],
                "summary": "UpdateAlbum",
                "parameters": [
                    {
                        "description": "id of updating album and params of it.",
                        "name": "Album",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Album"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.Success"
                        }
                    },
                    "400": {
                        "description": "Data is invalid",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "405": {
                        "description": "Method is not allowed",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    }
                }
            },
            "post": {
                "description": "creating new album",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "album"
                ],
                "summary": "CreateAlbum",
                "parameters": [
                    {
                        "description": "params of new album. Id will be set automatically.",
                        "name": "Album",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Album"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.Success"
                        }
                    },
                    "400": {
                        "description": "Data is invalid",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "405": {
                        "description": "Method is not allowed",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    }
                }
            }
        },
        "/api/v1/albums/popular": {
            "get": {
                "description": "getting top20 popular albums",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "album"
                ],
                "summary": "GetPopularAlbums",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.Success"
                        }
                    },
                    "400": {
                        "description": "Data is invalid",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "405": {
                        "description": "Method is not allowed",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    }
                }
            }
        },
        "/api/v1/albums/{id}": {
            "get": {
                "description": "getting album by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "album"
                ],
                "summary": "GetAlbum",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id of album which need to be getted",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Album"
                        }
                    },
                    "400": {
                        "description": "Data is invalid",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "405": {
                        "description": "Method is not allowed",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    }
                }
            },
            "delete": {
                "description": "deleting album by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "album"
                ],
                "summary": "DeleteAlbum",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id of album which need to be deleted",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.Success"
                        }
                    },
                    "400": {
                        "description": "Data is invalid",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "405": {
                        "description": "Method is not allowed",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    }
                }
            }
        },
        "/api/v1/artists/": {
            "get": {
                "description": "getting all artists",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "artist"
                ],
                "summary": "GetArtists",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.Success"
                        }
                    },
                    "400": {
                        "description": "Data is invalid",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "405": {
                        "description": "Method is not allowed",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    }
                }
            },
            "put": {
                "description": "updating artist by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "artist"
                ],
                "summary": "UpdateArtist",
                "parameters": [
                    {
                        "description": "id of updating artist and params of it.",
                        "name": "Artist",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Artist"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.Success"
                        }
                    },
                    "400": {
                        "description": "Data is invalid",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "405": {
                        "description": "Method is not allowed",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    }
                }
            },
            "post": {
                "description": "creating new artist",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "artist"
                ],
                "summary": "CreateArtist",
                "parameters": [
                    {
                        "description": "params of new artist. Id will be set automatically.",
                        "name": "Artist",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Artist"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.Success"
                        }
                    },
                    "400": {
                        "description": "Data is invalid",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "405": {
                        "description": "Method is not allowed",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    }
                }
            }
        },
        "/api/v1/artists/popular": {
            "get": {
                "description": "getting top20 popular artists",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "artist"
                ],
                "summary": "GetPopularArtists",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.Success"
                        }
                    },
                    "400": {
                        "description": "Data is invalid",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "405": {
                        "description": "Method is not allowed",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    }
                }
            }
        },
        "/api/v1/artists/{id}": {
            "get": {
                "description": "getting artist by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "artist"
                ],
                "summary": "GetArtist",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id of artist which need to be getted",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Artist"
                        }
                    },
                    "400": {
                        "description": "Data is invalid",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "405": {
                        "description": "Method is not allowed",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    }
                }
            },
            "delete": {
                "description": "deleting artist by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "artist"
                ],
                "summary": "DeleteArtist",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id of artist which need to be deleted",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.Success"
                        }
                    },
                    "400": {
                        "description": "Data is invalid",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "405": {
                        "description": "Method is not allowed",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    }
                }
            }
        },
        "/api/v1/login": {
            "post": {
                "description": "login user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "user params",
                        "name": "UserForm",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/forms.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/forms.Result"
                        }
                    },
                    "400": {
                        "description": "invalid login or password",
                        "schema": {
                            "$ref": "#/definitions/forms.Result"
                        }
                    },
                    "401": {
                        "description": "invalid csrf",
                        "schema": {
                            "$ref": "#/definitions/forms.Result"
                        }
                    }
                }
            }
        },
        "/api/v1/logout": {
            "post": {
                "description": "sign in user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Logout",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/forms.Result"
                        }
                    },
                    "401": {
                        "description": "invalid csrf",
                        "schema": {
                            "$ref": "#/definitions/forms.Result"
                        }
                    },
                    "460": {
                        "description": "Data is invalid",
                        "schema": {
                            "$ref": "#/definitions/forms.Result"
                        }
                    },
                    "521": {
                        "description": "Cannot create session",
                        "schema": {
                            "$ref": "#/definitions/forms.Result"
                        }
                    }
                }
            }
        },
        "/api/v1/signup": {
            "post": {
                "description": "login user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "SignUp",
                "parameters": [
                    {
                        "description": "new jwt data",
                        "name": "UserForm",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/forms.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success signup",
                        "schema": {
                            "$ref": "#/definitions/forms.Result"
                        }
                    },
                    "400": {
                        "description": "user already exist",
                        "schema": {
                            "$ref": "#/definitions/forms.Result"
                        }
                    },
                    "401": {
                        "description": "invalid csrf",
                        "schema": {
                            "$ref": "#/definitions/forms.Result"
                        }
                    }
                }
            }
        },
        "/api/v1/songs/": {
            "get": {
                "description": "getting all songs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "song"
                ],
                "summary": "GetSongs",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.Success"
                        }
                    },
                    "400": {
                        "description": "Data is invalid",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "405": {
                        "description": "Method is not allowed",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    }
                }
            },
            "put": {
                "description": "updating song by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "song"
                ],
                "summary": "UpdateSong",
                "parameters": [
                    {
                        "description": "id of updating song and params of it.",
                        "name": "Song",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Song"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.Success"
                        }
                    },
                    "400": {
                        "description": "Data is invalid",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "405": {
                        "description": "Method is not allowed",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    }
                }
            },
            "post": {
                "description": "creating new song",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "song"
                ],
                "summary": "CreateSong",
                "parameters": [
                    {
                        "description": "params of new song. Id will be set automatically.",
                        "name": "Song",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Song"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.Success"
                        }
                    },
                    "400": {
                        "description": "Data is invalid",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "405": {
                        "description": "Method is not allowed",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    }
                }
            }
        },
        "/api/v1/songs/popular": {
            "get": {
                "description": "getting top20 popular songs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "song"
                ],
                "summary": "GetPopularSongs",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.Success"
                        }
                    },
                    "400": {
                        "description": "Data is invalid",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "405": {
                        "description": "Method is not allowed",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    }
                }
            }
        },
        "/api/v1/songs/{id}": {
            "get": {
                "description": "getting song by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "song"
                ],
                "summary": "GetSong",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id of song which need to be getted",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Song"
                        }
                    },
                    "400": {
                        "description": "Data is invalid",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "405": {
                        "description": "Method is not allowed",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    }
                }
            },
            "delete": {
                "description": "deleting song by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "song"
                ],
                "summary": "DeleteSong",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id of song which need to be deleted",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.Success"
                        }
                    },
                    "400": {
                        "description": "Data is invalid",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "405": {
                        "description": "Method is not allowed",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    }
                }
            }
        },
        "/api/v1/users/self": {
            "get": {
                "description": "get user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "GetSelfUser",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id of user which need to be getted",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/forms.User"
                        }
                    },
                    "401": {
                        "description": "invalid csrf",
                        "schema": {
                            "$ref": "#/definitions/forms.Result"
                        }
                    }
                }
            }
        },
        "/api/v1/users/{id}": {
            "get": {
                "description": "get user by cookie",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "GetUser",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/forms.User"
                        }
                    },
                    "400": {
                        "description": "invalid id",
                        "schema": {
                            "$ref": "#/definitions/forms.Result"
                        }
                    },
                    "404": {
                        "description": "user not found",
                        "schema": {
                            "$ref": "#/definitions/forms.Result"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "forms.Result": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "some error note"
                },
                "result": {
                    "type": "string",
                    "example": "some success note"
                },
                "status": {
                    "type": "string",
                    "example": "OK"
                }
            }
        },
        "forms.User": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "hello@example.com"
                },
                "id": {
                    "type": "integer",
                    "example": 5125112
                },
                "password": {
                    "type": "string",
                    "example": "1fsgh2rfafas"
                },
                "username": {
                    "type": "string",
                    "example": "Martin"
                }
            }
        },
        "models.Album": {
            "type": "object",
            "properties": {
                "Date": {
                    "type": "integer",
                    "example": 0
                },
                "authorId": {
                    "type": "integer",
                    "example": 121
                },
                "countLikes": {
                    "type": "integer",
                    "example": 54
                },
                "countListening": {
                    "type": "integer",
                    "example": 15632
                },
                "coverId": {
                    "type": "integer",
                    "example": 254
                },
                "id": {
                    "type": "integer",
                    "example": 777
                },
                "title": {
                    "type": "string",
                    "example": "Mercury"
                }
            }
        },
        "models.Artist": {
            "type": "object",
            "properties": {
                "countFollowers": {
                    "type": "integer",
                    "example": 1001
                },
                "countListening": {
                    "type": "integer",
                    "example": 7654
                },
                "id": {
                    "type": "integer",
                    "example": 43
                },
                "name": {
                    "type": "string",
                    "example": "Imagine Dragons"
                },
                "photo": {
                    "type": "string",
                    "example": "/public/artists/photo/imagineDragons.png"
                }
            }
        },
        "models.Song": {
            "type": "object",
            "properties": {
                "albumId": {
                    "type": "integer",
                    "example": 143
                },
                "authorId": {
                    "type": "integer",
                    "example": 121
                },
                "countLikes": {
                    "type": "integer",
                    "example": 54
                },
                "countListening": {
                    "type": "integer",
                    "example": 15632
                },
                "duration": {
                    "type": "integer",
                    "example": 180
                },
                "id": {
                    "type": "integer",
                    "example": 777
                },
                "mp4": {
                    "type": "string",
                    "example": "/public/songs/mp4/track1.mp4"
                },
                "title": {
                    "type": "string",
                    "example": "Rain"
                }
            }
        },
        "utils.Error": {
            "type": "object",
            "properties": {
                "err": {
                    "type": "string"
                }
            }
        },
        "utils.Success": {
            "type": "object",
            "properties": {
                "result": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
