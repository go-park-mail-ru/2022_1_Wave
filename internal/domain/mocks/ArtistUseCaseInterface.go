// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	AlbumUseCase "github.com/go-park-mail-ru/2022_1_Wave/internal/app/album/usecase"

	TrackUseCase "github.com/go-park-mail-ru/2022_1_Wave/internal/app/track/usecase"

	domain "github.com/go-park-mail-ru/2022_1_Wave/internal/app/domain"

	mock "github.com/stretchr/testify/mock"
)

// ArtistUseCaseInterface is an autogenerated mock type for the ArtistUseCaseInterface type
type ArtistUseCaseInterface struct {
	mock.Mock
}

// CastToDTO provides a mock function with given fields: artist, album, track
func (_m *ArtistUseCaseInterface) CastToDTO(artist domain.Artist, album AlbumUseCase.AlbumUseCaseInterface, track TrackUseCase.TrackUseCaseInterface) (*domain.ArtistDataTransfer, error) {
	ret := _m.Called(artist, album, track)

	var r0 *domain.ArtistDataTransfer
	if rf, ok := ret.Get(0).(func(domain.Artist, AlbumUseCase.AlbumUseCaseInterface, TrackUseCase.TrackUseCaseInterface) *domain.ArtistDataTransfer); ok {
		r0 = rf(artist, album, track)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ArtistDataTransfer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Artist, AlbumUseCase.AlbumUseCaseInterface, TrackUseCase.TrackUseCaseInterface) error); ok {
		r1 = rf(artist, album, track)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: dom
func (_m *ArtistUseCaseInterface) Create(dom domain.Artist) error {
	ret := _m.Called(dom)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Artist) error); ok {
		r0 = rf(dom)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *ArtistUseCaseInterface) Delete(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: album, track
func (_m *ArtistUseCaseInterface) GetAll(album AlbumUseCase.AlbumUseCaseInterface, track TrackUseCase.TrackUseCaseInterface) ([]domain.ArtistDataTransfer, error) {
	ret := _m.Called(album, track)

	var r0 []domain.ArtistDataTransfer
	if rf, ok := ret.Get(0).(func(AlbumUseCase.AlbumUseCaseInterface, TrackUseCase.TrackUseCaseInterface) []domain.ArtistDataTransfer); ok {
		r0 = rf(album, track)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ArtistDataTransfer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(AlbumUseCase.AlbumUseCaseInterface, TrackUseCase.TrackUseCaseInterface) error); ok {
		r1 = rf(album, track)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: track, album, id
func (_m *ArtistUseCaseInterface) GetById(track TrackUseCase.TrackUseCaseInterface, album AlbumUseCase.AlbumUseCaseInterface, id int) (*domain.ArtistDataTransfer, error) {
	ret := _m.Called(track, album, id)

	var r0 *domain.ArtistDataTransfer
	if rf, ok := ret.Get(0).(func(TrackUseCase.TrackUseCaseInterface, AlbumUseCase.AlbumUseCaseInterface, int) *domain.ArtistDataTransfer); ok {
		r0 = rf(track, album, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ArtistDataTransfer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(TrackUseCase.TrackUseCaseInterface, AlbumUseCase.AlbumUseCaseInterface, int) error); ok {
		r1 = rf(track, album, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLastId provides a mock function with given fields:
func (_m *ArtistUseCaseInterface) GetLastId() (int, error) {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPopular provides a mock function with given fields: track, album
func (_m *ArtistUseCaseInterface) GetPopular(track TrackUseCase.TrackUseCaseInterface, album AlbumUseCase.AlbumUseCaseInterface) ([]domain.ArtistDataTransfer, error) {
	ret := _m.Called(track, album)

	var r0 []domain.ArtistDataTransfer
	if rf, ok := ret.Get(0).(func(TrackUseCase.TrackUseCaseInterface, AlbumUseCase.AlbumUseCaseInterface) []domain.ArtistDataTransfer); ok {
		r0 = rf(track, album)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ArtistDataTransfer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(TrackUseCase.TrackUseCaseInterface, AlbumUseCase.AlbumUseCaseInterface) error); ok {
		r1 = rf(track, album)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSize provides a mock function with given fields:
func (_m *ArtistUseCaseInterface) GetSize() (int, error) {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: dom
func (_m *ArtistUseCaseInterface) Update(dom domain.Artist) error {
	ret := _m.Called(dom)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Artist) error); ok {
		r0 = rf(dom)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
