// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	domain "github.com/go-park-mail-ru/2022_1_Wave/internal/app/domain"
	mock "github.com/stretchr/testify/mock"
)

// AlbumRepo is an autogenerated mock type for the AlbumRepo type
type AlbumRepo struct {
	mock.Mock
}

// Delete provides a mock function with given fields: _a0
func (_m *AlbumRepo) Delete(_a0 int) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAlbumsFromArtist provides a mock function with given fields: artist
func (_m *AlbumRepo) GetAlbumsFromArtist(artist int) ([]domain.Album, error) {
	ret := _m.Called(artist)

	var r0 []domain.Album
	if rf, ok := ret.Get(0).(func(int) []domain.Album); ok {
		r0 = rf(artist)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Album)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(artist)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *AlbumRepo) GetAll() ([]domain.Album, error) {
	ret := _m.Called()

	var r0 []domain.Album
	if rf, ok := ret.Get(0).(func() []domain.Album); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Album)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLastId provides a mock function with given fields:
func (_m *AlbumRepo) GetLastId() (int, error) {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPopular provides a mock function with given fields:
func (_m *AlbumRepo) GetPopular() ([]domain.Album, error) {
	ret := _m.Called()

	var r0 []domain.Album
	if rf, ok := ret.Get(0).(func() []domain.Album); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Album)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSize provides a mock function with given fields:
func (_m *AlbumRepo) GetSize() (int, error) {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: _a0
func (_m *AlbumRepo) Insert(_a0 domain.Album) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Album) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectByID provides a mock function with given fields: _a0
func (_m *AlbumRepo) SelectByID(_a0 int) (*domain.Album, error) {
	ret := _m.Called(_a0)

	var r0 *domain.Album
	if rf, ok := ret.Get(0).(func(int) *domain.Album); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Album)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0
func (_m *AlbumRepo) Update(_a0 domain.Album) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Album) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
