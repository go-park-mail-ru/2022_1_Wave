// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	domain "github.com/go-park-mail-ru/2022_1_Wave/internal/app/domain"
	TrackUseCase "github.com/go-park-mail-ru/2022_1_Wave/internal/app/track/usecase"

	mock "github.com/stretchr/testify/mock"
)

// AlbumUseCaseInterface is an autogenerated mock type for the AlbumUseCaseInterface type
type AlbumUseCaseInterface struct {
	mock.Mock
}

// CastToDTO provides a mock function with given fields: album, trackUseCase
func (_m *AlbumUseCaseInterface) CastToDTO(album domain.Album, trackUseCase TrackUseCase.TrackUseCaseInterface) (*domain.AlbumDataTransfer, error) {
	ret := _m.Called(album, trackUseCase)

	var r0 *domain.AlbumDataTransfer
	if rf, ok := ret.Get(0).(func(domain.Album, TrackUseCase.TrackUseCaseInterface) *domain.AlbumDataTransfer); ok {
		r0 = rf(album, trackUseCase)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.AlbumDataTransfer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Album, TrackUseCase.TrackUseCaseInterface) error); ok {
		r1 = rf(album, trackUseCase)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: dom
func (_m *AlbumUseCaseInterface) Create(dom domain.Album) error {
	ret := _m.Called(dom)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Album) error); ok {
		r0 = rf(dom)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *AlbumUseCaseInterface) Delete(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAlbumsFromArtist provides a mock function with given fields: artist, track
func (_m *AlbumUseCaseInterface) GetAlbumsFromArtist(artist int, track TrackUseCase.TrackUseCaseInterface) ([]domain.AlbumDataTransfer, error) {
	ret := _m.Called(artist, track)

	var r0 []domain.AlbumDataTransfer
	if rf, ok := ret.Get(0).(func(int, TrackUseCase.TrackUseCaseInterface) []domain.AlbumDataTransfer); ok {
		r0 = rf(artist, track)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.AlbumDataTransfer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, TrackUseCase.TrackUseCaseInterface) error); ok {
		r1 = rf(artist, track)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: track
func (_m *AlbumUseCaseInterface) GetAll(track TrackUseCase.TrackUseCaseInterface) ([]domain.AlbumDataTransfer, error) {
	ret := _m.Called(track)

	var r0 []domain.AlbumDataTransfer
	if rf, ok := ret.Get(0).(func(TrackUseCase.TrackUseCaseInterface) []domain.AlbumDataTransfer); ok {
		r0 = rf(track)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.AlbumDataTransfer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(TrackUseCase.TrackUseCaseInterface) error); ok {
		r1 = rf(track)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: track, id
func (_m *AlbumUseCaseInterface) GetById(track TrackUseCase.TrackUseCaseInterface, id int) (*domain.AlbumDataTransfer, error) {
	ret := _m.Called(track, id)

	var r0 *domain.AlbumDataTransfer
	if rf, ok := ret.Get(0).(func(TrackUseCase.TrackUseCaseInterface, int) *domain.AlbumDataTransfer); ok {
		r0 = rf(track, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.AlbumDataTransfer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(TrackUseCase.TrackUseCaseInterface, int) error); ok {
		r1 = rf(track, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLastId provides a mock function with given fields:
func (_m *AlbumUseCaseInterface) GetLastId() (int, error) {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPopular provides a mock function with given fields: track
func (_m *AlbumUseCaseInterface) GetPopular(track TrackUseCase.TrackUseCaseInterface) ([]domain.AlbumDataTransfer, error) {
	ret := _m.Called(track)

	var r0 []domain.AlbumDataTransfer
	if rf, ok := ret.Get(0).(func(TrackUseCase.TrackUseCaseInterface) []domain.AlbumDataTransfer); ok {
		r0 = rf(track)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.AlbumDataTransfer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(TrackUseCase.TrackUseCaseInterface) error); ok {
		r1 = rf(track)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSize provides a mock function with given fields:
func (_m *AlbumUseCaseInterface) GetSize() (int, error) {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: dom
func (_m *AlbumUseCaseInterface) Update(dom domain.Album) error {
	ret := _m.Called(dom)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Album) error); ok {
		r0 = rf(dom)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
