// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	proto "github.com/go-park-mail-ru/2022_1_Wave/internal/app/microservices/auth/proto"
)

// AuthorizationClient is an autogenerated mock type for the AuthorizationClient type
type AuthorizationClient struct {
	mock.Mock
}

// GetAuthorizedSession provides a mock function with given fields: ctx, in, opts
func (_m *AuthorizationClient) GetAuthorizedSession(ctx context.Context, in *proto.UserId, opts ...grpc.CallOption) (*proto.GetSessionResult, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.GetSessionResult
	if rf, ok := ret.Get(0).(func(context.Context, *proto.UserId, ...grpc.CallOption) *proto.GetSessionResult); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetSessionResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.UserId, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUnauthorizedSession provides a mock function with given fields: ctx, in, opts
func (_m *AuthorizationClient) GetUnauthorizedSession(ctx context.Context, in *proto.Empty, opts ...grpc.CallOption) (*proto.GetSessionResult, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.GetSessionResult
	if rf, ok := ret.Get(0).(func(context.Context, *proto.Empty, ...grpc.CallOption) *proto.GetSessionResult); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetSessionResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.Empty, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsAuthSession provides a mock function with given fields: ctx, in, opts
func (_m *AuthorizationClient) IsAuthSession(ctx context.Context, in *proto.Session, opts ...grpc.CallOption) (*proto.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *proto.Session, ...grpc.CallOption) *proto.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.Session, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsSession provides a mock function with given fields: ctx, in, opts
func (_m *AuthorizationClient) IsSession(ctx context.Context, in *proto.Session, opts ...grpc.CallOption) (*proto.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *proto.Session, ...grpc.CallOption) *proto.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.Session, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, in, opts
func (_m *AuthorizationClient) Login(ctx context.Context, in *proto.LoginData, opts ...grpc.CallOption) (*proto.LoginResult, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.LoginResult
	if rf, ok := ret.Get(0).(func(context.Context, *proto.LoginData, ...grpc.CallOption) *proto.LoginResult); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.LoginResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.LoginData, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Logout provides a mock function with given fields: ctx, in, opts
func (_m *AuthorizationClient) Logout(ctx context.Context, in *proto.Session, opts ...grpc.CallOption) (*proto.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *proto.Session, ...grpc.CallOption) *proto.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.Session, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignUp provides a mock function with given fields: ctx, in, opts
func (_m *AuthorizationClient) SignUp(ctx context.Context, in *proto.SignUpData, opts ...grpc.CallOption) (*proto.SignUpResult, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.SignUpResult
	if rf, ok := ret.Get(0).(func(context.Context, *proto.SignUpData, ...grpc.CallOption) *proto.SignUpResult); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.SignUpResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.SignUpData, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
