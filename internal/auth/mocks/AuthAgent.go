// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	auth_microservice_domain "github.com/go-park-mail-ru/2022_1_Wave/internal/microservices/auth"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// AuthAgent is an autogenerated mock type for the AuthAgent type
type AuthAgent struct {
	mock.Mock
}

// DeleteSession provides a mock function with given fields: sessionId
func (_m *AuthAgent) DeleteSession(sessionId string) error {
	ret := _m.Called(sessionId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(sessionId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSession provides a mock function with given fields: sessionId
func (_m *AuthAgent) GetSession(sessionId string) (*auth_microservice_domain.Session, error) {
	ret := _m.Called(sessionId)

	var r0 *auth_microservice_domain.Session
	if rf, ok := ret.Get(0).(func(string) *auth_microservice_domain.Session); ok {
		r0 = rf(sessionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth_microservice_domain.Session)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(sessionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsAuthSession provides a mock function with given fields: sessionId
func (_m *AuthAgent) IsAuthSession(sessionId string) bool {
	ret := _m.Called(sessionId)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(sessionId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsSession provides a mock function with given fields: sessionId
func (_m *AuthAgent) IsSession(sessionId string) bool {
	ret := _m.Called(sessionId)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(sessionId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MakeSessionAuthorized provides a mock function with given fields: sessionId, userId
func (_m *AuthAgent) MakeSessionAuthorized(sessionId string, userId uint) (string, error) {
	ret := _m.Called(sessionId, userId)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, uint) string); ok {
		r0 = rf(sessionId, userId)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, uint) error); ok {
		r1 = rf(sessionId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MakeSessionUnauthorized provides a mock function with given fields: sessionId
func (_m *AuthAgent) MakeSessionUnauthorized(sessionId string) (string, error) {
	ret := _m.Called(sessionId)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(sessionId)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(sessionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetNewAuthorizedSession provides a mock function with given fields: userId, expires
func (_m *AuthAgent) SetNewAuthorizedSession(userId uint, expires time.Duration) (string, error) {
	ret := _m.Called(userId, expires)

	var r0 string
	if rf, ok := ret.Get(0).(func(uint, time.Duration) string); ok {
		r0 = rf(userId, expires)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, time.Duration) error); ok {
		r1 = rf(userId, expires)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetNewUnauthorizedSession provides a mock function with given fields: expires
func (_m *AuthAgent) SetNewUnauthorizedSession(expires time.Duration) (string, error) {
	ret := _m.Called(expires)

	var r0 string
	if rf, ok := ret.Get(0).(func(time.Duration) string); ok {
		r0 = rf(expires)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(time.Duration) error); ok {
		r1 = rf(expires)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
