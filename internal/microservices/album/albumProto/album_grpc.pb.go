// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: album/albumProto/album.proto

package albumProto

import (
	context "context"
	gatewayProto "github.com/go-park-mail-ru/2022_1_Wave/internal/microservices/gateway/gatewayProto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AlbumUseCaseClient is the client API for AlbumUseCase service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlbumUseCaseClient interface {
	GetAll(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AlbumsResponse, error)
	GetAllCovers(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AlbumsCoverResponse, error)
	GetLastId(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*gatewayProto.IntResponse, error)
	GetLastCoverId(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*gatewayProto.IntResponse, error)
	Create(ctx context.Context, in *Album, opts ...grpc.CallOption) (*empty.Empty, error)
	CreateCover(ctx context.Context, in *AlbumCover, opts ...grpc.CallOption) (*empty.Empty, error)
	Update(ctx context.Context, in *Album, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateCover(ctx context.Context, in *AlbumCover, opts ...grpc.CallOption) (*empty.Empty, error)
	Delete(ctx context.Context, in *gatewayProto.IdArg, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteCover(ctx context.Context, in *gatewayProto.IdArg, opts ...grpc.CallOption) (*empty.Empty, error)
	GetById(ctx context.Context, in *gatewayProto.IdArg, opts ...grpc.CallOption) (*AlbumDataTransfer, error)
	GetCoverById(ctx context.Context, in *gatewayProto.IdArg, opts ...grpc.CallOption) (*AlbumCoverDataTransfer, error)
	GetPopular(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AlbumsResponse, error)
	GetAlbumsFromArtist(ctx context.Context, in *gatewayProto.IdArg, opts ...grpc.CallOption) (*AlbumsResponse, error)
	GetSize(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*gatewayProto.IntResponse, error)
	SearchByTitle(ctx context.Context, in *gatewayProto.StringArg, opts ...grpc.CallOption) (*AlbumsResponse, error)
	GetFavorites(ctx context.Context, in *gatewayProto.IdArg, opts ...grpc.CallOption) (*AlbumsResponse, error)
	AddToFavorites(ctx context.Context, in *gatewayProto.UserIdAlbumIdArg, opts ...grpc.CallOption) (*empty.Empty, error)
	RemoveFromFavorites(ctx context.Context, in *gatewayProto.UserIdAlbumIdArg, opts ...grpc.CallOption) (*empty.Empty, error)
}

type albumUseCaseClient struct {
	cc grpc.ClientConnInterface
}

func NewAlbumUseCaseClient(cc grpc.ClientConnInterface) AlbumUseCaseClient {
	return &albumUseCaseClient{cc}
}

func (c *albumUseCaseClient) GetAll(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AlbumsResponse, error) {
	out := new(AlbumsResponse)
	err := c.cc.Invoke(ctx, "/album.AlbumUseCase/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumUseCaseClient) GetAllCovers(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AlbumsCoverResponse, error) {
	out := new(AlbumsCoverResponse)
	err := c.cc.Invoke(ctx, "/album.AlbumUseCase/GetAllCovers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumUseCaseClient) GetLastId(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*gatewayProto.IntResponse, error) {
	out := new(gatewayProto.IntResponse)
	err := c.cc.Invoke(ctx, "/album.AlbumUseCase/GetLastId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumUseCaseClient) GetLastCoverId(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*gatewayProto.IntResponse, error) {
	out := new(gatewayProto.IntResponse)
	err := c.cc.Invoke(ctx, "/album.AlbumUseCase/GetLastCoverId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumUseCaseClient) Create(ctx context.Context, in *Album, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/album.AlbumUseCase/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumUseCaseClient) CreateCover(ctx context.Context, in *AlbumCover, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/album.AlbumUseCase/CreateCover", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumUseCaseClient) Update(ctx context.Context, in *Album, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/album.AlbumUseCase/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumUseCaseClient) UpdateCover(ctx context.Context, in *AlbumCover, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/album.AlbumUseCase/UpdateCover", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumUseCaseClient) Delete(ctx context.Context, in *gatewayProto.IdArg, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/album.AlbumUseCase/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumUseCaseClient) DeleteCover(ctx context.Context, in *gatewayProto.IdArg, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/album.AlbumUseCase/DeleteCover", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumUseCaseClient) GetById(ctx context.Context, in *gatewayProto.IdArg, opts ...grpc.CallOption) (*AlbumDataTransfer, error) {
	out := new(AlbumDataTransfer)
	err := c.cc.Invoke(ctx, "/album.AlbumUseCase/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumUseCaseClient) GetCoverById(ctx context.Context, in *gatewayProto.IdArg, opts ...grpc.CallOption) (*AlbumCoverDataTransfer, error) {
	out := new(AlbumCoverDataTransfer)
	err := c.cc.Invoke(ctx, "/album.AlbumUseCase/GetCoverById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumUseCaseClient) GetPopular(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AlbumsResponse, error) {
	out := new(AlbumsResponse)
	err := c.cc.Invoke(ctx, "/album.AlbumUseCase/GetPopular", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumUseCaseClient) GetAlbumsFromArtist(ctx context.Context, in *gatewayProto.IdArg, opts ...grpc.CallOption) (*AlbumsResponse, error) {
	out := new(AlbumsResponse)
	err := c.cc.Invoke(ctx, "/album.AlbumUseCase/GetAlbumsFromArtist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumUseCaseClient) GetSize(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*gatewayProto.IntResponse, error) {
	out := new(gatewayProto.IntResponse)
	err := c.cc.Invoke(ctx, "/album.AlbumUseCase/GetSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumUseCaseClient) SearchByTitle(ctx context.Context, in *gatewayProto.StringArg, opts ...grpc.CallOption) (*AlbumsResponse, error) {
	out := new(AlbumsResponse)
	err := c.cc.Invoke(ctx, "/album.AlbumUseCase/SearchByTitle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumUseCaseClient) GetFavorites(ctx context.Context, in *gatewayProto.IdArg, opts ...grpc.CallOption) (*AlbumsResponse, error) {
	out := new(AlbumsResponse)
	err := c.cc.Invoke(ctx, "/album.AlbumUseCase/GetFavorites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumUseCaseClient) AddToFavorites(ctx context.Context, in *gatewayProto.UserIdAlbumIdArg, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/album.AlbumUseCase/AddToFavorites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumUseCaseClient) RemoveFromFavorites(ctx context.Context, in *gatewayProto.UserIdAlbumIdArg, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/album.AlbumUseCase/RemoveFromFavorites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlbumUseCaseServer is the server API for AlbumUseCase service.
// All implementations must embed UnimplementedAlbumUseCaseServer
// for forward compatibility
type AlbumUseCaseServer interface {
	GetAll(context.Context, *empty.Empty) (*AlbumsResponse, error)
	GetAllCovers(context.Context, *empty.Empty) (*AlbumsCoverResponse, error)
	GetLastId(context.Context, *empty.Empty) (*gatewayProto.IntResponse, error)
	GetLastCoverId(context.Context, *empty.Empty) (*gatewayProto.IntResponse, error)
	Create(context.Context, *Album) (*empty.Empty, error)
	CreateCover(context.Context, *AlbumCover) (*empty.Empty, error)
	Update(context.Context, *Album) (*empty.Empty, error)
	UpdateCover(context.Context, *AlbumCover) (*empty.Empty, error)
	Delete(context.Context, *gatewayProto.IdArg) (*empty.Empty, error)
	DeleteCover(context.Context, *gatewayProto.IdArg) (*empty.Empty, error)
	GetById(context.Context, *gatewayProto.IdArg) (*AlbumDataTransfer, error)
	GetCoverById(context.Context, *gatewayProto.IdArg) (*AlbumCoverDataTransfer, error)
	GetPopular(context.Context, *empty.Empty) (*AlbumsResponse, error)
	GetAlbumsFromArtist(context.Context, *gatewayProto.IdArg) (*AlbumsResponse, error)
	GetSize(context.Context, *empty.Empty) (*gatewayProto.IntResponse, error)
	SearchByTitle(context.Context, *gatewayProto.StringArg) (*AlbumsResponse, error)
	GetFavorites(context.Context, *gatewayProto.IdArg) (*AlbumsResponse, error)
	AddToFavorites(context.Context, *gatewayProto.UserIdAlbumIdArg) (*empty.Empty, error)
	RemoveFromFavorites(context.Context, *gatewayProto.UserIdAlbumIdArg) (*empty.Empty, error)
	mustEmbedUnimplementedAlbumUseCaseServer()
}

// UnimplementedAlbumUseCaseServer must be embedded to have forward compatible implementations.
type UnimplementedAlbumUseCaseServer struct {
}

func (UnimplementedAlbumUseCaseServer) GetAll(context.Context, *empty.Empty) (*AlbumsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedAlbumUseCaseServer) GetAllCovers(context.Context, *empty.Empty) (*AlbumsCoverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCovers not implemented")
}
func (UnimplementedAlbumUseCaseServer) GetLastId(context.Context, *empty.Empty) (*gatewayProto.IntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastId not implemented")
}
func (UnimplementedAlbumUseCaseServer) GetLastCoverId(context.Context, *empty.Empty) (*gatewayProto.IntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastCoverId not implemented")
}
func (UnimplementedAlbumUseCaseServer) Create(context.Context, *Album) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAlbumUseCaseServer) CreateCover(context.Context, *AlbumCover) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCover not implemented")
}
func (UnimplementedAlbumUseCaseServer) Update(context.Context, *Album) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAlbumUseCaseServer) UpdateCover(context.Context, *AlbumCover) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCover not implemented")
}
func (UnimplementedAlbumUseCaseServer) Delete(context.Context, *gatewayProto.IdArg) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAlbumUseCaseServer) DeleteCover(context.Context, *gatewayProto.IdArg) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCover not implemented")
}
func (UnimplementedAlbumUseCaseServer) GetById(context.Context, *gatewayProto.IdArg) (*AlbumDataTransfer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedAlbumUseCaseServer) GetCoverById(context.Context, *gatewayProto.IdArg) (*AlbumCoverDataTransfer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoverById not implemented")
}
func (UnimplementedAlbumUseCaseServer) GetPopular(context.Context, *empty.Empty) (*AlbumsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPopular not implemented")
}
func (UnimplementedAlbumUseCaseServer) GetAlbumsFromArtist(context.Context, *gatewayProto.IdArg) (*AlbumsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlbumsFromArtist not implemented")
}
func (UnimplementedAlbumUseCaseServer) GetSize(context.Context, *empty.Empty) (*gatewayProto.IntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSize not implemented")
}
func (UnimplementedAlbumUseCaseServer) SearchByTitle(context.Context, *gatewayProto.StringArg) (*AlbumsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchByTitle not implemented")
}
func (UnimplementedAlbumUseCaseServer) GetFavorites(context.Context, *gatewayProto.IdArg) (*AlbumsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFavorites not implemented")
}
func (UnimplementedAlbumUseCaseServer) AddToFavorites(context.Context, *gatewayProto.UserIdAlbumIdArg) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToFavorites not implemented")
}
func (UnimplementedAlbumUseCaseServer) RemoveFromFavorites(context.Context, *gatewayProto.UserIdAlbumIdArg) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromFavorites not implemented")
}
func (UnimplementedAlbumUseCaseServer) mustEmbedUnimplementedAlbumUseCaseServer() {}

// UnsafeAlbumUseCaseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlbumUseCaseServer will
// result in compilation errors.
type UnsafeAlbumUseCaseServer interface {
	mustEmbedUnimplementedAlbumUseCaseServer()
}

func RegisterAlbumUseCaseServer(s grpc.ServiceRegistrar, srv AlbumUseCaseServer) {
	s.RegisterService(&AlbumUseCase_ServiceDesc, srv)
}

func _AlbumUseCase_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumUseCaseServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/album.AlbumUseCase/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumUseCaseServer).GetAll(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumUseCase_GetAllCovers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumUseCaseServer).GetAllCovers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/album.AlbumUseCase/GetAllCovers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumUseCaseServer).GetAllCovers(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumUseCase_GetLastId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumUseCaseServer).GetLastId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/album.AlbumUseCase/GetLastId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumUseCaseServer).GetLastId(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumUseCase_GetLastCoverId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumUseCaseServer).GetLastCoverId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/album.AlbumUseCase/GetLastCoverId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumUseCaseServer).GetLastCoverId(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumUseCase_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Album)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumUseCaseServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/album.AlbumUseCase/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumUseCaseServer).Create(ctx, req.(*Album))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumUseCase_CreateCover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlbumCover)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumUseCaseServer).CreateCover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/album.AlbumUseCase/CreateCover",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumUseCaseServer).CreateCover(ctx, req.(*AlbumCover))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumUseCase_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Album)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumUseCaseServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/album.AlbumUseCase/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumUseCaseServer).Update(ctx, req.(*Album))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumUseCase_UpdateCover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlbumCover)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumUseCaseServer).UpdateCover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/album.AlbumUseCase/UpdateCover",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumUseCaseServer).UpdateCover(ctx, req.(*AlbumCover))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumUseCase_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(gatewayProto.IdArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumUseCaseServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/album.AlbumUseCase/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumUseCaseServer).Delete(ctx, req.(*gatewayProto.IdArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumUseCase_DeleteCover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(gatewayProto.IdArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumUseCaseServer).DeleteCover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/album.AlbumUseCase/DeleteCover",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumUseCaseServer).DeleteCover(ctx, req.(*gatewayProto.IdArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumUseCase_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(gatewayProto.IdArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumUseCaseServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/album.AlbumUseCase/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumUseCaseServer).GetById(ctx, req.(*gatewayProto.IdArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumUseCase_GetCoverById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(gatewayProto.IdArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumUseCaseServer).GetCoverById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/album.AlbumUseCase/GetCoverById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumUseCaseServer).GetCoverById(ctx, req.(*gatewayProto.IdArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumUseCase_GetPopular_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumUseCaseServer).GetPopular(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/album.AlbumUseCase/GetPopular",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumUseCaseServer).GetPopular(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumUseCase_GetAlbumsFromArtist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(gatewayProto.IdArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumUseCaseServer).GetAlbumsFromArtist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/album.AlbumUseCase/GetAlbumsFromArtist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumUseCaseServer).GetAlbumsFromArtist(ctx, req.(*gatewayProto.IdArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumUseCase_GetSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumUseCaseServer).GetSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/album.AlbumUseCase/GetSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumUseCaseServer).GetSize(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumUseCase_SearchByTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(gatewayProto.StringArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumUseCaseServer).SearchByTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/album.AlbumUseCase/SearchByTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumUseCaseServer).SearchByTitle(ctx, req.(*gatewayProto.StringArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumUseCase_GetFavorites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(gatewayProto.IdArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumUseCaseServer).GetFavorites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/album.AlbumUseCase/GetFavorites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumUseCaseServer).GetFavorites(ctx, req.(*gatewayProto.IdArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumUseCase_AddToFavorites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(gatewayProto.UserIdAlbumIdArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumUseCaseServer).AddToFavorites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/album.AlbumUseCase/AddToFavorites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumUseCaseServer).AddToFavorites(ctx, req.(*gatewayProto.UserIdAlbumIdArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumUseCase_RemoveFromFavorites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(gatewayProto.UserIdAlbumIdArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumUseCaseServer).RemoveFromFavorites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/album.AlbumUseCase/RemoveFromFavorites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumUseCaseServer).RemoveFromFavorites(ctx, req.(*gatewayProto.UserIdAlbumIdArg))
	}
	return interceptor(ctx, in, info, handler)
}

// AlbumUseCase_ServiceDesc is the grpc.ServiceDesc for AlbumUseCase service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AlbumUseCase_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "album.AlbumUseCase",
	HandlerType: (*AlbumUseCaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _AlbumUseCase_GetAll_Handler,
		},
		{
			MethodName: "GetAllCovers",
			Handler:    _AlbumUseCase_GetAllCovers_Handler,
		},
		{
			MethodName: "GetLastId",
			Handler:    _AlbumUseCase_GetLastId_Handler,
		},
		{
			MethodName: "GetLastCoverId",
			Handler:    _AlbumUseCase_GetLastCoverId_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _AlbumUseCase_Create_Handler,
		},
		{
			MethodName: "CreateCover",
			Handler:    _AlbumUseCase_CreateCover_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AlbumUseCase_Update_Handler,
		},
		{
			MethodName: "UpdateCover",
			Handler:    _AlbumUseCase_UpdateCover_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AlbumUseCase_Delete_Handler,
		},
		{
			MethodName: "DeleteCover",
			Handler:    _AlbumUseCase_DeleteCover_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _AlbumUseCase_GetById_Handler,
		},
		{
			MethodName: "GetCoverById",
			Handler:    _AlbumUseCase_GetCoverById_Handler,
		},
		{
			MethodName: "GetPopular",
			Handler:    _AlbumUseCase_GetPopular_Handler,
		},
		{
			MethodName: "GetAlbumsFromArtist",
			Handler:    _AlbumUseCase_GetAlbumsFromArtist_Handler,
		},
		{
			MethodName: "GetSize",
			Handler:    _AlbumUseCase_GetSize_Handler,
		},
		{
			MethodName: "SearchByTitle",
			Handler:    _AlbumUseCase_SearchByTitle_Handler,
		},
		{
			MethodName: "GetFavorites",
			Handler:    _AlbumUseCase_GetFavorites_Handler,
		},
		{
			MethodName: "AddToFavorites",
			Handler:    _AlbumUseCase_AddToFavorites_Handler,
		},
		{
			MethodName: "RemoveFromFavorites",
			Handler:    _AlbumUseCase_RemoveFromFavorites_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "album/albumProto/album.proto",
}
