// Code generated by protoc-gen-go. DO NOT EDIT.
// source: auth.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SessionId struct {
	SessionId            string   `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SessionId) Reset()         { *m = SessionId{} }
func (m *SessionId) String() string { return proto.CompactTextString(m) }
func (*SessionId) ProtoMessage()    {}
func (*SessionId) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bbd6f3875b0e874, []int{0}
}

func (m *SessionId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SessionId.Unmarshal(m, b)
}
func (m *SessionId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SessionId.Marshal(b, m, deterministic)
}
func (m *SessionId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionId.Merge(m, src)
}
func (m *SessionId) XXX_Size() int {
	return xxx_messageInfo_SessionId.Size(m)
}
func (m *SessionId) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionId.DiscardUnknown(m)
}

var xxx_messageInfo_SessionId proto.InternalMessageInfo

func (m *SessionId) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

type Session struct {
	UserId               uint64   `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	IsAuthorized         bool     `protobuf:"varint,2,opt,name=is_authorized,json=isAuthorized,proto3" json:"is_authorized,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Session) Reset()         { *m = Session{} }
func (m *Session) String() string { return proto.CompactTextString(m) }
func (*Session) ProtoMessage()    {}
func (*Session) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bbd6f3875b0e874, []int{1}
}

func (m *Session) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Session.Unmarshal(m, b)
}
func (m *Session) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Session.Marshal(b, m, deterministic)
}
func (m *Session) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Session.Merge(m, src)
}
func (m *Session) XXX_Size() int {
	return xxx_messageInfo_Session.Size(m)
}
func (m *Session) XXX_DiscardUnknown() {
	xxx_messageInfo_Session.DiscardUnknown(m)
}

var xxx_messageInfo_Session proto.InternalMessageInfo

func (m *Session) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *Session) GetIsAuthorized() bool {
	if m != nil {
		return m.IsAuthorized
	}
	return false
}

type UserSessionId struct {
	SessionId            string   `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	UserId               uint64   `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserSessionId) Reset()         { *m = UserSessionId{} }
func (m *UserSessionId) String() string { return proto.CompactTextString(m) }
func (*UserSessionId) ProtoMessage()    {}
func (*UserSessionId) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bbd6f3875b0e874, []int{2}
}

func (m *UserSessionId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserSessionId.Unmarshal(m, b)
}
func (m *UserSessionId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserSessionId.Marshal(b, m, deterministic)
}
func (m *UserSessionId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserSessionId.Merge(m, src)
}
func (m *UserSessionId) XXX_Size() int {
	return xxx_messageInfo_UserSessionId.Size(m)
}
func (m *UserSessionId) XXX_DiscardUnknown() {
	xxx_messageInfo_UserSessionId.DiscardUnknown(m)
}

var xxx_messageInfo_UserSessionId proto.InternalMessageInfo

func (m *UserSessionId) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *UserSessionId) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bbd6f3875b0e874, []int{3}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type BoolResult struct {
	Result               bool     `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BoolResult) Reset()         { *m = BoolResult{} }
func (m *BoolResult) String() string { return proto.CompactTextString(m) }
func (*BoolResult) ProtoMessage()    {}
func (*BoolResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bbd6f3875b0e874, []int{4}
}

func (m *BoolResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BoolResult.Unmarshal(m, b)
}
func (m *BoolResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BoolResult.Marshal(b, m, deterministic)
}
func (m *BoolResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BoolResult.Merge(m, src)
}
func (m *BoolResult) XXX_Size() int {
	return xxx_messageInfo_BoolResult.Size(m)
}
func (m *BoolResult) XXX_DiscardUnknown() {
	xxx_messageInfo_BoolResult.DiscardUnknown(m)
}

var xxx_messageInfo_BoolResult proto.InternalMessageInfo

func (m *BoolResult) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

type SetUnauthSession struct {
	Expires              string   `protobuf:"bytes,1,opt,name=expires,proto3" json:"expires,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetUnauthSession) Reset()         { *m = SetUnauthSession{} }
func (m *SetUnauthSession) String() string { return proto.CompactTextString(m) }
func (*SetUnauthSession) ProtoMessage()    {}
func (*SetUnauthSession) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bbd6f3875b0e874, []int{5}
}

func (m *SetUnauthSession) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetUnauthSession.Unmarshal(m, b)
}
func (m *SetUnauthSession) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetUnauthSession.Marshal(b, m, deterministic)
}
func (m *SetUnauthSession) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetUnauthSession.Merge(m, src)
}
func (m *SetUnauthSession) XXX_Size() int {
	return xxx_messageInfo_SetUnauthSession.Size(m)
}
func (m *SetUnauthSession) XXX_DiscardUnknown() {
	xxx_messageInfo_SetUnauthSession.DiscardUnknown(m)
}

var xxx_messageInfo_SetUnauthSession proto.InternalMessageInfo

func (m *SetUnauthSession) GetExpires() string {
	if m != nil {
		return m.Expires
	}
	return ""
}

type SetAuthSessionMsg struct {
	UserId               uint64   `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Expires              string   `protobuf:"bytes,2,opt,name=expires,proto3" json:"expires,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetAuthSessionMsg) Reset()         { *m = SetAuthSessionMsg{} }
func (m *SetAuthSessionMsg) String() string { return proto.CompactTextString(m) }
func (*SetAuthSessionMsg) ProtoMessage()    {}
func (*SetAuthSessionMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bbd6f3875b0e874, []int{6}
}

func (m *SetAuthSessionMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetAuthSessionMsg.Unmarshal(m, b)
}
func (m *SetAuthSessionMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetAuthSessionMsg.Marshal(b, m, deterministic)
}
func (m *SetAuthSessionMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetAuthSessionMsg.Merge(m, src)
}
func (m *SetAuthSessionMsg) XXX_Size() int {
	return xxx_messageInfo_SetAuthSessionMsg.Size(m)
}
func (m *SetAuthSessionMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_SetAuthSessionMsg.DiscardUnknown(m)
}

var xxx_messageInfo_SetAuthSessionMsg proto.InternalMessageInfo

func (m *SetAuthSessionMsg) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *SetAuthSessionMsg) GetExpires() string {
	if m != nil {
		return m.Expires
	}
	return ""
}

func init() {
	proto.RegisterType((*SessionId)(nil), "auth.SessionId")
	proto.RegisterType((*Session)(nil), "auth.Session")
	proto.RegisterType((*UserSessionId)(nil), "auth.UserSessionId")
	proto.RegisterType((*Empty)(nil), "auth.Empty")
	proto.RegisterType((*BoolResult)(nil), "auth.BoolResult")
	proto.RegisterType((*SetUnauthSession)(nil), "auth.SetUnauthSession")
	proto.RegisterType((*SetAuthSessionMsg)(nil), "auth.SetAuthSessionMsg")
}

func init() { proto.RegisterFile("auth.proto", fileDescriptor_8bbd6f3875b0e874) }

var fileDescriptor_8bbd6f3875b0e874 = []byte{
	// 389 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xcf, 0x6e, 0xe2, 0x30,
	0x10, 0xc6, 0x03, 0xcb, 0x12, 0x32, 0xbb, 0xd1, 0xb2, 0x5e, 0x2d, 0xc9, 0x22, 0xad, 0x84, 0xdc,
	0x1e, 0x50, 0x55, 0x41, 0xd5, 0xf6, 0x5a, 0x55, 0xa0, 0x02, 0xca, 0x81, 0x1e, 0x12, 0x71, 0xe9,
	0x05, 0x51, 0x32, 0x6a, 0xad, 0x02, 0x41, 0xb6, 0xe9, 0xbf, 0x17, 0xee, 0x6b, 0x54, 0x89, 0x63,
	0x48, 0x0a, 0x48, 0x9c, 0xf0, 0x0c, 0xdf, 0xfc, 0x66, 0xbe, 0xb1, 0x03, 0x30, 0x59, 0xc9, 0xc7,
	0xd6, 0x92, 0x47, 0x32, 0x22, 0xa5, 0xf8, 0x4c, 0x4f, 0xc0, 0x0a, 0x50, 0x08, 0x16, 0x2d, 0xbc,
	0x90, 0xfc, 0x07, 0x10, 0x2a, 0x18, 0xb3, 0xd0, 0x2d, 0x34, 0x0a, 0x4d, 0xcb, 0xb7, 0x84, 0xfe,
	0x9b, 0x0e, 0xc0, 0x4c, 0xb5, 0xc4, 0x01, 0x73, 0x25, 0x90, 0x6b, 0x59, 0xc9, 0x2f, 0xc7, 0xa1,
	0x17, 0x92, 0x23, 0xb0, 0x99, 0x18, 0xc7, 0xe8, 0x88, 0xb3, 0x77, 0x0c, 0xdd, 0x62, 0xa3, 0xd0,
	0xac, 0xf8, 0x3f, 0x99, 0xe8, 0xac, 0x73, 0x74, 0x00, 0xf6, 0x48, 0x20, 0x3f, 0xb4, 0x71, 0xb6,
	0x5b, 0x31, 0xdb, 0x8d, 0x9a, 0xf0, 0xbd, 0x37, 0x5f, 0xca, 0x37, 0x7a, 0x0c, 0xd0, 0x8d, 0xa2,
	0x99, 0x8f, 0x62, 0x35, 0x93, 0xa4, 0x06, 0x65, 0x9e, 0x9c, 0x12, 0x54, 0xc5, 0x4f, 0x23, 0x7a,
	0x0a, 0xd5, 0x00, 0xe5, 0x68, 0x11, 0x8f, 0xa7, 0x9d, 0xb8, 0x60, 0xe2, 0xeb, 0x92, 0x71, 0x14,
	0x69, 0x5f, 0x1d, 0xd2, 0x3e, 0xfc, 0x0e, 0x50, 0x76, 0x36, 0xda, 0xa1, 0x78, 0xd8, 0x6f, 0x3c,
	0xc3, 0x29, 0xe6, 0x38, 0xe7, 0x1f, 0xdf, 0xc0, 0xd6, 0xe6, 0x27, 0x32, 0xee, 0xd9, 0x02, 0x18,
	0xa0, 0xd4, 0x13, 0xfc, 0x6a, 0x25, 0xb7, 0xb2, 0xde, 0x46, 0xdd, 0xce, 0x25, 0xa8, 0x41, 0xfa,
	0xf0, 0x2f, 0x40, 0x79, 0x8b, 0x2f, 0x6a, 0x74, 0xb5, 0x45, 0x5d, 0x5e, 0xd3, 0xea, 0xbc, 0xb1,
	0xfa, 0x57, 0x2c, 0x35, 0x48, 0x0f, 0x1c, 0xc5, 0xe9, 0x6c, 0x51, 0x9c, 0x35, 0x25, 0x6f, 0x78,
	0x17, 0xe6, 0x1a, 0xfe, 0x0e, 0x27, 0x4f, 0x98, 0xa6, 0x36, 0x2c, 0xf2, 0x47, 0x69, 0x73, 0x77,
	0xbb, 0x0b, 0x70, 0x05, 0x4e, 0x06, 0x90, 0x35, 0xb5, 0xbd, 0x8c, 0x1d, 0xe5, 0x6d, 0xb0, 0x6f,
	0x70, 0x86, 0x12, 0xf7, 0x6e, 0xf0, 0x87, 0x4a, 0xa8, 0xb7, 0x61, 0x90, 0x33, 0xb0, 0x3c, 0xb1,
	0x57, 0x5c, 0x55, 0x89, 0xcd, 0xfb, 0xa1, 0x06, 0xb9, 0x04, 0xdb, 0x13, 0x99, 0x4d, 0x1c, 0x54,
	0xd5, 0xad, 0xdf, 0xb9, 0x73, 0x36, 0xe5, 0x91, 0x40, 0xfe, 0xcc, 0xa6, 0x28, 0xda, 0xb1, 0xa4,
	0x9d, 0x7c, 0x6e, 0xf7, 0xe5, 0xe4, 0xe7, 0xe2, 0x33, 0x00, 0x00, 0xff, 0xff, 0x6c, 0x6c, 0x5d,
	0xde, 0x83, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AuthorizationClient is the client API for Authorization service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthorizationClient interface {
	GetSession(ctx context.Context, in *SessionId, opts ...grpc.CallOption) (*Session, error)
	SetNewUnauthorizedSession(ctx context.Context, in *SetUnauthSession, opts ...grpc.CallOption) (*SessionId, error)
	SetNewAuthorizedSession(ctx context.Context, in *SetAuthSessionMsg, opts ...grpc.CallOption) (*SessionId, error)
	MakeSessionAuthorized(ctx context.Context, in *UserSessionId, opts ...grpc.CallOption) (*SessionId, error)
	MakeSessionUnauthorized(ctx context.Context, in *SessionId, opts ...grpc.CallOption) (*SessionId, error)
	DeleteSession(ctx context.Context, in *SessionId, opts ...grpc.CallOption) (*Empty, error)
	IsSession(ctx context.Context, in *SessionId, opts ...grpc.CallOption) (*BoolResult, error)
	IsAuthSession(ctx context.Context, in *SessionId, opts ...grpc.CallOption) (*BoolResult, error)
}

type authorizationClient struct {
	cc *grpc.ClientConn
}

func NewAuthorizationClient(cc *grpc.ClientConn) AuthorizationClient {
	return &authorizationClient{cc}
}

func (c *authorizationClient) GetSession(ctx context.Context, in *SessionId, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := c.cc.Invoke(ctx, "/auth.Authorization/GetSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) SetNewUnauthorizedSession(ctx context.Context, in *SetUnauthSession, opts ...grpc.CallOption) (*SessionId, error) {
	out := new(SessionId)
	err := c.cc.Invoke(ctx, "/auth.Authorization/SetNewUnauthorizedSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) SetNewAuthorizedSession(ctx context.Context, in *SetAuthSessionMsg, opts ...grpc.CallOption) (*SessionId, error) {
	out := new(SessionId)
	err := c.cc.Invoke(ctx, "/auth.Authorization/SetNewAuthorizedSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) MakeSessionAuthorized(ctx context.Context, in *UserSessionId, opts ...grpc.CallOption) (*SessionId, error) {
	out := new(SessionId)
	err := c.cc.Invoke(ctx, "/auth.Authorization/MakeSessionAuthorized", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) MakeSessionUnauthorized(ctx context.Context, in *SessionId, opts ...grpc.CallOption) (*SessionId, error) {
	out := new(SessionId)
	err := c.cc.Invoke(ctx, "/auth.Authorization/MakeSessionUnauthorized", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) DeleteSession(ctx context.Context, in *SessionId, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/auth.Authorization/DeleteSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) IsSession(ctx context.Context, in *SessionId, opts ...grpc.CallOption) (*BoolResult, error) {
	out := new(BoolResult)
	err := c.cc.Invoke(ctx, "/auth.Authorization/IsSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) IsAuthSession(ctx context.Context, in *SessionId, opts ...grpc.CallOption) (*BoolResult, error) {
	out := new(BoolResult)
	err := c.cc.Invoke(ctx, "/auth.Authorization/IsAuthSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorizationServer is the server API for Authorization service.
type AuthorizationServer interface {
	GetSession(context.Context, *SessionId) (*Session, error)
	SetNewUnauthorizedSession(context.Context, *SetUnauthSession) (*SessionId, error)
	SetNewAuthorizedSession(context.Context, *SetAuthSessionMsg) (*SessionId, error)
	MakeSessionAuthorized(context.Context, *UserSessionId) (*SessionId, error)
	MakeSessionUnauthorized(context.Context, *SessionId) (*SessionId, error)
	DeleteSession(context.Context, *SessionId) (*Empty, error)
	IsSession(context.Context, *SessionId) (*BoolResult, error)
	IsAuthSession(context.Context, *SessionId) (*BoolResult, error)
}

// UnimplementedAuthorizationServer can be embedded to have forward compatible implementations.
type UnimplementedAuthorizationServer struct {
}

func (*UnimplementedAuthorizationServer) GetSession(ctx context.Context, req *SessionId) (*Session, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSession not implemented")
}
func (*UnimplementedAuthorizationServer) SetNewUnauthorizedSession(ctx context.Context, req *SetUnauthSession) (*SessionId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNewUnauthorizedSession not implemented")
}
func (*UnimplementedAuthorizationServer) SetNewAuthorizedSession(ctx context.Context, req *SetAuthSessionMsg) (*SessionId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNewAuthorizedSession not implemented")
}
func (*UnimplementedAuthorizationServer) MakeSessionAuthorized(ctx context.Context, req *UserSessionId) (*SessionId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeSessionAuthorized not implemented")
}
func (*UnimplementedAuthorizationServer) MakeSessionUnauthorized(ctx context.Context, req *SessionId) (*SessionId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeSessionUnauthorized not implemented")
}
func (*UnimplementedAuthorizationServer) DeleteSession(ctx context.Context, req *SessionId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSession not implemented")
}
func (*UnimplementedAuthorizationServer) IsSession(ctx context.Context, req *SessionId) (*BoolResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsSession not implemented")
}
func (*UnimplementedAuthorizationServer) IsAuthSession(ctx context.Context, req *SessionId) (*BoolResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsAuthSession not implemented")
}

func RegisterAuthorizationServer(s *grpc.Server, srv AuthorizationServer) {
	s.RegisterService(&_Authorization_serviceDesc, srv)
}

func _Authorization_GetSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).GetSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Authorization/GetSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).GetSession(ctx, req.(*SessionId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_SetNewUnauthorizedSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUnauthSession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).SetNewUnauthorizedSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Authorization/SetNewUnauthorizedSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).SetNewUnauthorizedSession(ctx, req.(*SetUnauthSession))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_SetNewAuthorizedSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAuthSessionMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).SetNewAuthorizedSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Authorization/SetNewAuthorizedSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).SetNewAuthorizedSession(ctx, req.(*SetAuthSessionMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_MakeSessionAuthorized_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSessionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).MakeSessionAuthorized(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Authorization/MakeSessionAuthorized",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).MakeSessionAuthorized(ctx, req.(*UserSessionId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_MakeSessionUnauthorized_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).MakeSessionUnauthorized(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Authorization/MakeSessionUnauthorized",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).MakeSessionUnauthorized(ctx, req.(*SessionId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_DeleteSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).DeleteSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Authorization/DeleteSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).DeleteSession(ctx, req.(*SessionId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_IsSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).IsSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Authorization/IsSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).IsSession(ctx, req.(*SessionId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_IsAuthSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).IsAuthSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Authorization/IsAuthSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).IsAuthSession(ctx, req.(*SessionId))
	}
	return interceptor(ctx, in, info, handler)
}

var _Authorization_serviceDesc = grpc.ServiceDesc{
	ServiceName: "auth.Authorization",
	HandlerType: (*AuthorizationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSession",
			Handler:    _Authorization_GetSession_Handler,
		},
		{
			MethodName: "SetNewUnauthorizedSession",
			Handler:    _Authorization_SetNewUnauthorizedSession_Handler,
		},
		{
			MethodName: "SetNewAuthorizedSession",
			Handler:    _Authorization_SetNewAuthorizedSession_Handler,
		},
		{
			MethodName: "MakeSessionAuthorized",
			Handler:    _Authorization_MakeSessionAuthorized_Handler,
		},
		{
			MethodName: "MakeSessionUnauthorized",
			Handler:    _Authorization_MakeSessionUnauthorized_Handler,
		},
		{
			MethodName: "DeleteSession",
			Handler:    _Authorization_DeleteSession_Handler,
		},
		{
			MethodName: "IsSession",
			Handler:    _Authorization_IsSession_Handler,
		},
		{
			MethodName: "IsAuthSession",
			Handler:    _Authorization_IsAuthSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}
