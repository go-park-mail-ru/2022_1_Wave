// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: auth/proto/auth.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthorizationClient is the client API for Authorization service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthorizationClient interface {
	GetSession(ctx context.Context, in *SessionId, opts ...grpc.CallOption) (*Session, error)
	SetNewUnauthorizedSession(ctx context.Context, in *SetUnauthSession, opts ...grpc.CallOption) (*SessionId, error)
	SetNewAuthorizedSession(ctx context.Context, in *SetAuthSessionMsg, opts ...grpc.CallOption) (*SessionId, error)
	MakeSessionAuthorized(ctx context.Context, in *UserSessionId, opts ...grpc.CallOption) (*SessionId, error)
	MakeSessionUnauthorized(ctx context.Context, in *SessionId, opts ...grpc.CallOption) (*SessionId, error)
	DeleteSession(ctx context.Context, in *SessionId, opts ...grpc.CallOption) (*Empty, error)
	IsSession(ctx context.Context, in *SessionId, opts ...grpc.CallOption) (*BoolResult, error)
	IsAuthSession(ctx context.Context, in *SessionId, opts ...grpc.CallOption) (*BoolResult, error)
}

type authorizationClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorizationClient(cc grpc.ClientConnInterface) AuthorizationClient {
	return &authorizationClient{cc}
}

func (c *authorizationClient) GetSession(ctx context.Context, in *SessionId, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := c.cc.Invoke(ctx, "/auth.Authorization/GetSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) SetNewUnauthorizedSession(ctx context.Context, in *SetUnauthSession, opts ...grpc.CallOption) (*SessionId, error) {
	out := new(SessionId)
	err := c.cc.Invoke(ctx, "/auth.Authorization/SetNewUnauthorizedSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) SetNewAuthorizedSession(ctx context.Context, in *SetAuthSessionMsg, opts ...grpc.CallOption) (*SessionId, error) {
	out := new(SessionId)
	err := c.cc.Invoke(ctx, "/auth.Authorization/SetNewAuthorizedSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) MakeSessionAuthorized(ctx context.Context, in *UserSessionId, opts ...grpc.CallOption) (*SessionId, error) {
	out := new(SessionId)
	err := c.cc.Invoke(ctx, "/auth.Authorization/MakeSessionAuthorized", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) MakeSessionUnauthorized(ctx context.Context, in *SessionId, opts ...grpc.CallOption) (*SessionId, error) {
	out := new(SessionId)
	err := c.cc.Invoke(ctx, "/auth.Authorization/MakeSessionUnauthorized", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) DeleteSession(ctx context.Context, in *SessionId, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/auth.Authorization/DeleteSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) IsSession(ctx context.Context, in *SessionId, opts ...grpc.CallOption) (*BoolResult, error) {
	out := new(BoolResult)
	err := c.cc.Invoke(ctx, "/auth.Authorization/IsSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) IsAuthSession(ctx context.Context, in *SessionId, opts ...grpc.CallOption) (*BoolResult, error) {
	out := new(BoolResult)
	err := c.cc.Invoke(ctx, "/auth.Authorization/IsAuthSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorizationServer is the server API for Authorization service.
// All implementations must embed UnimplementedAuthorizationServer
// for forward compatibility
type AuthorizationServer interface {
	GetSession(context.Context, *SessionId) (*Session, error)
	SetNewUnauthorizedSession(context.Context, *SetUnauthSession) (*SessionId, error)
	SetNewAuthorizedSession(context.Context, *SetAuthSessionMsg) (*SessionId, error)
	MakeSessionAuthorized(context.Context, *UserSessionId) (*SessionId, error)
	MakeSessionUnauthorized(context.Context, *SessionId) (*SessionId, error)
	DeleteSession(context.Context, *SessionId) (*Empty, error)
	IsSession(context.Context, *SessionId) (*BoolResult, error)
	IsAuthSession(context.Context, *SessionId) (*BoolResult, error)
	mustEmbedUnimplementedAuthorizationServer()
}

// UnimplementedAuthorizationServer must be embedded to have forward compatible implementations.
type UnimplementedAuthorizationServer struct {
}

func (UnimplementedAuthorizationServer) GetSession(context.Context, *SessionId) (*Session, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSession not implemented")
}
func (UnimplementedAuthorizationServer) SetNewUnauthorizedSession(context.Context, *SetUnauthSession) (*SessionId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNewUnauthorizedSession not implemented")
}
func (UnimplementedAuthorizationServer) SetNewAuthorizedSession(context.Context, *SetAuthSessionMsg) (*SessionId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNewAuthorizedSession not implemented")
}
func (UnimplementedAuthorizationServer) MakeSessionAuthorized(context.Context, *UserSessionId) (*SessionId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeSessionAuthorized not implemented")
}
func (UnimplementedAuthorizationServer) MakeSessionUnauthorized(context.Context, *SessionId) (*SessionId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeSessionUnauthorized not implemented")
}
func (UnimplementedAuthorizationServer) DeleteSession(context.Context, *SessionId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSession not implemented")
}
func (UnimplementedAuthorizationServer) IsSession(context.Context, *SessionId) (*BoolResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsSession not implemented")
}
func (UnimplementedAuthorizationServer) IsAuthSession(context.Context, *SessionId) (*BoolResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsAuthSession not implemented")
}
func (UnimplementedAuthorizationServer) mustEmbedUnimplementedAuthorizationServer() {}

// UnsafeAuthorizationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthorizationServer will
// result in compilation errors.
type UnsafeAuthorizationServer interface {
	mustEmbedUnimplementedAuthorizationServer()
}

func RegisterAuthorizationServer(s grpc.ServiceRegistrar, srv AuthorizationServer) {
	s.RegisterService(&Authorization_ServiceDesc, srv)
}

func _Authorization_GetSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).GetSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Authorization/GetSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).GetSession(ctx, req.(*SessionId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_SetNewUnauthorizedSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUnauthSession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).SetNewUnauthorizedSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Authorization/SetNewUnauthorizedSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).SetNewUnauthorizedSession(ctx, req.(*SetUnauthSession))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_SetNewAuthorizedSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAuthSessionMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).SetNewAuthorizedSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Authorization/SetNewAuthorizedSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).SetNewAuthorizedSession(ctx, req.(*SetAuthSessionMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_MakeSessionAuthorized_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSessionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).MakeSessionAuthorized(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Authorization/MakeSessionAuthorized",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).MakeSessionAuthorized(ctx, req.(*UserSessionId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_MakeSessionUnauthorized_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).MakeSessionUnauthorized(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Authorization/MakeSessionUnauthorized",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).MakeSessionUnauthorized(ctx, req.(*SessionId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_DeleteSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).DeleteSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Authorization/DeleteSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).DeleteSession(ctx, req.(*SessionId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_IsSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).IsSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Authorization/IsSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).IsSession(ctx, req.(*SessionId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_IsAuthSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).IsAuthSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Authorization/IsAuthSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).IsAuthSession(ctx, req.(*SessionId))
	}
	return interceptor(ctx, in, info, handler)
}

// Authorization_ServiceDesc is the grpc.ServiceDesc for Authorization service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Authorization_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.Authorization",
	HandlerType: (*AuthorizationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSession",
			Handler:    _Authorization_GetSession_Handler,
		},
		{
			MethodName: "SetNewUnauthorizedSession",
			Handler:    _Authorization_SetNewUnauthorizedSession_Handler,
		},
		{
			MethodName: "SetNewAuthorizedSession",
			Handler:    _Authorization_SetNewAuthorizedSession_Handler,
		},
		{
			MethodName: "MakeSessionAuthorized",
			Handler:    _Authorization_MakeSessionAuthorized_Handler,
		},
		{
			MethodName: "MakeSessionUnauthorized",
			Handler:    _Authorization_MakeSessionUnauthorized_Handler,
		},
		{
			MethodName: "DeleteSession",
			Handler:    _Authorization_DeleteSession_Handler,
		},
		{
			MethodName: "IsSession",
			Handler:    _Authorization_IsSession_Handler,
		},
		{
			MethodName: "IsAuthSession",
			Handler:    _Authorization_IsAuthSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth/proto/auth.proto",
}
