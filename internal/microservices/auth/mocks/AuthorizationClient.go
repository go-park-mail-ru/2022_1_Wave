// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	proto "github.com/go-park-mail-ru/2022_1_Wave/internal/microservices/auth/proto"
)

// AuthorizationClient is an autogenerated mock type for the AuthorizationClient type
type AuthorizationClient struct {
	mock.Mock
}

// DeleteSession provides a mock function with given fields: ctx, in, opts
func (_m *AuthorizationClient) DeleteSession(ctx context.Context, in *proto.SessionId, opts ...grpc.CallOption) (*proto.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *proto.SessionId, ...grpc.CallOption) *proto.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.SessionId, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSession provides a mock function with given fields: ctx, in, opts
func (_m *AuthorizationClient) GetSession(ctx context.Context, in *proto.SessionId, opts ...grpc.CallOption) (*proto.Session, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.Session
	if rf, ok := ret.Get(0).(func(context.Context, *proto.SessionId, ...grpc.CallOption) *proto.Session); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Session)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.SessionId, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsAuthSession provides a mock function with given fields: ctx, in, opts
func (_m *AuthorizationClient) IsAuthSession(ctx context.Context, in *proto.SessionId, opts ...grpc.CallOption) (*proto.BoolResult, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.BoolResult
	if rf, ok := ret.Get(0).(func(context.Context, *proto.SessionId, ...grpc.CallOption) *proto.BoolResult); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.BoolResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.SessionId, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsSession provides a mock function with given fields: ctx, in, opts
func (_m *AuthorizationClient) IsSession(ctx context.Context, in *proto.SessionId, opts ...grpc.CallOption) (*proto.BoolResult, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.BoolResult
	if rf, ok := ret.Get(0).(func(context.Context, *proto.SessionId, ...grpc.CallOption) *proto.BoolResult); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.BoolResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.SessionId, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MakeSessionAuthorized provides a mock function with given fields: ctx, in, opts
func (_m *AuthorizationClient) MakeSessionAuthorized(ctx context.Context, in *proto.UserSessionId, opts ...grpc.CallOption) (*proto.SessionId, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.SessionId
	if rf, ok := ret.Get(0).(func(context.Context, *proto.UserSessionId, ...grpc.CallOption) *proto.SessionId); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.SessionId)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.UserSessionId, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MakeSessionUnauthorized provides a mock function with given fields: ctx, in, opts
func (_m *AuthorizationClient) MakeSessionUnauthorized(ctx context.Context, in *proto.SessionId, opts ...grpc.CallOption) (*proto.SessionId, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.SessionId
	if rf, ok := ret.Get(0).(func(context.Context, *proto.SessionId, ...grpc.CallOption) *proto.SessionId); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.SessionId)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.SessionId, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetNewAuthorizedSession provides a mock function with given fields: ctx, in, opts
func (_m *AuthorizationClient) SetNewAuthorizedSession(ctx context.Context, in *proto.SetAuthSessionMsg, opts ...grpc.CallOption) (*proto.SessionId, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.SessionId
	if rf, ok := ret.Get(0).(func(context.Context, *proto.SetAuthSessionMsg, ...grpc.CallOption) *proto.SessionId); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.SessionId)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.SetAuthSessionMsg, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetNewUnauthorizedSession provides a mock function with given fields: ctx, in, opts
func (_m *AuthorizationClient) SetNewUnauthorizedSession(ctx context.Context, in *proto.SetUnauthSession, opts ...grpc.CallOption) (*proto.SessionId, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.SessionId
	if rf, ok := ret.Get(0).(func(context.Context, *proto.SetUnauthSession, ...grpc.CallOption) *proto.SessionId); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.SessionId)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.SetUnauthSession, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
