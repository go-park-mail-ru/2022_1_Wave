// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: track/trackProto/track.proto

package trackProto

import (
	context "context"
	gatewayProto "github.com/go-park-mail-ru/2022_1_Wave/internal/microservices/gateway/gatewayProto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TrackUseCaseClient is the client API for TrackUseCase service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrackUseCaseClient interface {
	GetAll(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*TracksResponse, error)
	GetLastId(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*gatewayProto.IntResponse, error)
	Create(ctx context.Context, in *Track, opts ...grpc.CallOption) (*empty.Empty, error)
	Update(ctx context.Context, in *Track, opts ...grpc.CallOption) (*empty.Empty, error)
	Delete(ctx context.Context, in *gatewayProto.IdArg, opts ...grpc.CallOption) (*empty.Empty, error)
	GetById(ctx context.Context, in *gatewayProto.IdArg, opts ...grpc.CallOption) (*TrackDataTransfer, error)
	GetPopular(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*TracksResponse, error)
	GetTracksFromAlbum(ctx context.Context, in *gatewayProto.IdArg, opts ...grpc.CallOption) (*TracksResponse, error)
	GetPopularTracksFromArtist(ctx context.Context, in *gatewayProto.IdArg, opts ...grpc.CallOption) (*TracksResponse, error)
	GetSize(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*gatewayProto.IntResponse, error)
	Like(ctx context.Context, in *gatewayProto.IdArg, opts ...grpc.CallOption) (*empty.Empty, error)
	Listen(ctx context.Context, in *gatewayProto.IdArg, opts ...grpc.CallOption) (*empty.Empty, error)
	SearchByTitle(ctx context.Context, in *gatewayProto.StringArg, opts ...grpc.CallOption) (*TracksResponse, error)
	GetFavorites(ctx context.Context, in *gatewayProto.IdArg, opts ...grpc.CallOption) (*TracksResponse, error)
	AddToFavorites(ctx context.Context, in *gatewayProto.UserIdTrackIdArg, opts ...grpc.CallOption) (*empty.Empty, error)
	RemoveFromFavorites(ctx context.Context, in *gatewayProto.UserIdTrackIdArg, opts ...grpc.CallOption) (*empty.Empty, error)
}

type trackUseCaseClient struct {
	cc grpc.ClientConnInterface
}

func NewTrackUseCaseClient(cc grpc.ClientConnInterface) TrackUseCaseClient {
	return &trackUseCaseClient{cc}
}

func (c *trackUseCaseClient) GetAll(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*TracksResponse, error) {
	out := new(TracksResponse)
	err := c.cc.Invoke(ctx, "/track.TrackUseCase/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackUseCaseClient) GetLastId(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*gatewayProto.IntResponse, error) {
	out := new(gatewayProto.IntResponse)
	err := c.cc.Invoke(ctx, "/track.TrackUseCase/GetLastId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackUseCaseClient) Create(ctx context.Context, in *Track, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/track.TrackUseCase/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackUseCaseClient) Update(ctx context.Context, in *Track, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/track.TrackUseCase/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackUseCaseClient) Delete(ctx context.Context, in *gatewayProto.IdArg, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/track.TrackUseCase/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackUseCaseClient) GetById(ctx context.Context, in *gatewayProto.IdArg, opts ...grpc.CallOption) (*TrackDataTransfer, error) {
	out := new(TrackDataTransfer)
	err := c.cc.Invoke(ctx, "/track.TrackUseCase/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackUseCaseClient) GetPopular(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*TracksResponse, error) {
	out := new(TracksResponse)
	err := c.cc.Invoke(ctx, "/track.TrackUseCase/GetPopular", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackUseCaseClient) GetTracksFromAlbum(ctx context.Context, in *gatewayProto.IdArg, opts ...grpc.CallOption) (*TracksResponse, error) {
	out := new(TracksResponse)
	err := c.cc.Invoke(ctx, "/track.TrackUseCase/GetTracksFromAlbum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackUseCaseClient) GetPopularTracksFromArtist(ctx context.Context, in *gatewayProto.IdArg, opts ...grpc.CallOption) (*TracksResponse, error) {
	out := new(TracksResponse)
	err := c.cc.Invoke(ctx, "/track.TrackUseCase/GetPopularTracksFromArtist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackUseCaseClient) GetSize(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*gatewayProto.IntResponse, error) {
	out := new(gatewayProto.IntResponse)
	err := c.cc.Invoke(ctx, "/track.TrackUseCase/GetSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackUseCaseClient) Like(ctx context.Context, in *gatewayProto.IdArg, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/track.TrackUseCase/Like", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackUseCaseClient) Listen(ctx context.Context, in *gatewayProto.IdArg, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/track.TrackUseCase/Listen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackUseCaseClient) SearchByTitle(ctx context.Context, in *gatewayProto.StringArg, opts ...grpc.CallOption) (*TracksResponse, error) {
	out := new(TracksResponse)
	err := c.cc.Invoke(ctx, "/track.TrackUseCase/SearchByTitle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackUseCaseClient) GetFavorites(ctx context.Context, in *gatewayProto.IdArg, opts ...grpc.CallOption) (*TracksResponse, error) {
	out := new(TracksResponse)
	err := c.cc.Invoke(ctx, "/track.TrackUseCase/GetFavorites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackUseCaseClient) AddToFavorites(ctx context.Context, in *gatewayProto.UserIdTrackIdArg, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/track.TrackUseCase/AddToFavorites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackUseCaseClient) RemoveFromFavorites(ctx context.Context, in *gatewayProto.UserIdTrackIdArg, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/track.TrackUseCase/RemoveFromFavorites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrackUseCaseServer is the server API for TrackUseCase service.
// All implementations must embed UnimplementedTrackUseCaseServer
// for forward compatibility
type TrackUseCaseServer interface {
	GetAll(context.Context, *empty.Empty) (*TracksResponse, error)
	GetLastId(context.Context, *empty.Empty) (*gatewayProto.IntResponse, error)
	Create(context.Context, *Track) (*empty.Empty, error)
	Update(context.Context, *Track) (*empty.Empty, error)
	Delete(context.Context, *gatewayProto.IdArg) (*empty.Empty, error)
	GetById(context.Context, *gatewayProto.IdArg) (*TrackDataTransfer, error)
	GetPopular(context.Context, *empty.Empty) (*TracksResponse, error)
	GetTracksFromAlbum(context.Context, *gatewayProto.IdArg) (*TracksResponse, error)
	GetPopularTracksFromArtist(context.Context, *gatewayProto.IdArg) (*TracksResponse, error)
	GetSize(context.Context, *empty.Empty) (*gatewayProto.IntResponse, error)
	Like(context.Context, *gatewayProto.IdArg) (*empty.Empty, error)
	Listen(context.Context, *gatewayProto.IdArg) (*empty.Empty, error)
	SearchByTitle(context.Context, *gatewayProto.StringArg) (*TracksResponse, error)
	GetFavorites(context.Context, *gatewayProto.IdArg) (*TracksResponse, error)
	AddToFavorites(context.Context, *gatewayProto.UserIdTrackIdArg) (*empty.Empty, error)
	RemoveFromFavorites(context.Context, *gatewayProto.UserIdTrackIdArg) (*empty.Empty, error)
	mustEmbedUnimplementedTrackUseCaseServer()
}

// UnimplementedTrackUseCaseServer must be embedded to have forward compatible implementations.
type UnimplementedTrackUseCaseServer struct {
}

func (UnimplementedTrackUseCaseServer) GetAll(context.Context, *empty.Empty) (*TracksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedTrackUseCaseServer) GetLastId(context.Context, *empty.Empty) (*gatewayProto.IntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastId not implemented")
}
func (UnimplementedTrackUseCaseServer) Create(context.Context, *Track) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTrackUseCaseServer) Update(context.Context, *Track) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedTrackUseCaseServer) Delete(context.Context, *gatewayProto.IdArg) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedTrackUseCaseServer) GetById(context.Context, *gatewayProto.IdArg) (*TrackDataTransfer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedTrackUseCaseServer) GetPopular(context.Context, *empty.Empty) (*TracksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPopular not implemented")
}
func (UnimplementedTrackUseCaseServer) GetTracksFromAlbum(context.Context, *gatewayProto.IdArg) (*TracksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTracksFromAlbum not implemented")
}
func (UnimplementedTrackUseCaseServer) GetPopularTracksFromArtist(context.Context, *gatewayProto.IdArg) (*TracksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPopularTracksFromArtist not implemented")
}
func (UnimplementedTrackUseCaseServer) GetSize(context.Context, *empty.Empty) (*gatewayProto.IntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSize not implemented")
}
func (UnimplementedTrackUseCaseServer) Like(context.Context, *gatewayProto.IdArg) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Like not implemented")
}
func (UnimplementedTrackUseCaseServer) Listen(context.Context, *gatewayProto.IdArg) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedTrackUseCaseServer) SearchByTitle(context.Context, *gatewayProto.StringArg) (*TracksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchByTitle not implemented")
}
func (UnimplementedTrackUseCaseServer) GetFavorites(context.Context, *gatewayProto.IdArg) (*TracksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFavorites not implemented")
}
func (UnimplementedTrackUseCaseServer) AddToFavorites(context.Context, *gatewayProto.UserIdTrackIdArg) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToFavorites not implemented")
}
func (UnimplementedTrackUseCaseServer) RemoveFromFavorites(context.Context, *gatewayProto.UserIdTrackIdArg) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromFavorites not implemented")
}
func (UnimplementedTrackUseCaseServer) mustEmbedUnimplementedTrackUseCaseServer() {}

// UnsafeTrackUseCaseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrackUseCaseServer will
// result in compilation errors.
type UnsafeTrackUseCaseServer interface {
	mustEmbedUnimplementedTrackUseCaseServer()
}

func RegisterTrackUseCaseServer(s grpc.ServiceRegistrar, srv TrackUseCaseServer) {
	s.RegisterService(&TrackUseCase_ServiceDesc, srv)
}

func _TrackUseCase_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackUseCaseServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/track.TrackUseCase/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackUseCaseServer).GetAll(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackUseCase_GetLastId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackUseCaseServer).GetLastId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/track.TrackUseCase/GetLastId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackUseCaseServer).GetLastId(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackUseCase_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Track)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackUseCaseServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/track.TrackUseCase/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackUseCaseServer).Create(ctx, req.(*Track))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackUseCase_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Track)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackUseCaseServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/track.TrackUseCase/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackUseCaseServer).Update(ctx, req.(*Track))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackUseCase_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(gatewayProto.IdArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackUseCaseServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/track.TrackUseCase/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackUseCaseServer).Delete(ctx, req.(*gatewayProto.IdArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackUseCase_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(gatewayProto.IdArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackUseCaseServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/track.TrackUseCase/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackUseCaseServer).GetById(ctx, req.(*gatewayProto.IdArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackUseCase_GetPopular_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackUseCaseServer).GetPopular(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/track.TrackUseCase/GetPopular",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackUseCaseServer).GetPopular(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackUseCase_GetTracksFromAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(gatewayProto.IdArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackUseCaseServer).GetTracksFromAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/track.TrackUseCase/GetTracksFromAlbum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackUseCaseServer).GetTracksFromAlbum(ctx, req.(*gatewayProto.IdArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackUseCase_GetPopularTracksFromArtist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(gatewayProto.IdArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackUseCaseServer).GetPopularTracksFromArtist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/track.TrackUseCase/GetPopularTracksFromArtist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackUseCaseServer).GetPopularTracksFromArtist(ctx, req.(*gatewayProto.IdArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackUseCase_GetSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackUseCaseServer).GetSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/track.TrackUseCase/GetSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackUseCaseServer).GetSize(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackUseCase_Like_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(gatewayProto.IdArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackUseCaseServer).Like(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/track.TrackUseCase/Like",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackUseCaseServer).Like(ctx, req.(*gatewayProto.IdArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackUseCase_Listen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(gatewayProto.IdArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackUseCaseServer).Listen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/track.TrackUseCase/Listen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackUseCaseServer).Listen(ctx, req.(*gatewayProto.IdArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackUseCase_SearchByTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(gatewayProto.StringArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackUseCaseServer).SearchByTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/track.TrackUseCase/SearchByTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackUseCaseServer).SearchByTitle(ctx, req.(*gatewayProto.StringArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackUseCase_GetFavorites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(gatewayProto.IdArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackUseCaseServer).GetFavorites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/track.TrackUseCase/GetFavorites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackUseCaseServer).GetFavorites(ctx, req.(*gatewayProto.IdArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackUseCase_AddToFavorites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(gatewayProto.UserIdTrackIdArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackUseCaseServer).AddToFavorites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/track.TrackUseCase/AddToFavorites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackUseCaseServer).AddToFavorites(ctx, req.(*gatewayProto.UserIdTrackIdArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackUseCase_RemoveFromFavorites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(gatewayProto.UserIdTrackIdArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackUseCaseServer).RemoveFromFavorites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/track.TrackUseCase/RemoveFromFavorites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackUseCaseServer).RemoveFromFavorites(ctx, req.(*gatewayProto.UserIdTrackIdArg))
	}
	return interceptor(ctx, in, info, handler)
}

// TrackUseCase_ServiceDesc is the grpc.ServiceDesc for TrackUseCase service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrackUseCase_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "track.TrackUseCase",
	HandlerType: (*TrackUseCaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _TrackUseCase_GetAll_Handler,
		},
		{
			MethodName: "GetLastId",
			Handler:    _TrackUseCase_GetLastId_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _TrackUseCase_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _TrackUseCase_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TrackUseCase_Delete_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _TrackUseCase_GetById_Handler,
		},
		{
			MethodName: "GetPopular",
			Handler:    _TrackUseCase_GetPopular_Handler,
		},
		{
			MethodName: "GetTracksFromAlbum",
			Handler:    _TrackUseCase_GetTracksFromAlbum_Handler,
		},
		{
			MethodName: "GetPopularTracksFromArtist",
			Handler:    _TrackUseCase_GetPopularTracksFromArtist_Handler,
		},
		{
			MethodName: "GetSize",
			Handler:    _TrackUseCase_GetSize_Handler,
		},
		{
			MethodName: "Like",
			Handler:    _TrackUseCase_Like_Handler,
		},
		{
			MethodName: "Listen",
			Handler:    _TrackUseCase_Listen_Handler,
		},
		{
			MethodName: "SearchByTitle",
			Handler:    _TrackUseCase_SearchByTitle_Handler,
		},
		{
			MethodName: "GetFavorites",
			Handler:    _TrackUseCase_GetFavorites_Handler,
		},
		{
			MethodName: "AddToFavorites",
			Handler:    _TrackUseCase_AddToFavorites_Handler,
		},
		{
			MethodName: "RemoveFromFavorites",
			Handler:    _TrackUseCase_RemoveFromFavorites_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "track/trackProto/track.proto",
}
