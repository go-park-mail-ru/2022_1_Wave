// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.12.4
// source: track/trackProto/track.proto

package trackProto

import (
	gatewayProto "github.com/go-park-mail-ru/2022_1_Wave/internal/microservices/gateway/gatewayProto"
	empty "github.com/golang/protobuf/ptypes/empty"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Track struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id" example:"4" db:"id" validate:"min=0"`                                                  // @gotags: json:"id" example:"4" db:"id" validate:"min=0"
	AlbumId         int64  `protobuf:"varint,2,opt,name=album_id,json=albumId,proto3" json:"albumId" example:"8" db:"album_id" validate:"min=0"`                         // @gotags: json:"albumId" example:"8" db:"album_id" validate:"min=0"
	ArtistId        int64  `protobuf:"varint,3,opt,name=artist_id,json=artistId,proto3" json:"artistId" example:"8" db:"artist_id" validate:"min=0,nonnil"`                      // @gotags: json:"artistId" example:"8" db:"artist_id" validate:"min=0,nonnil"
	Title           string `protobuf:"bytes,4,opt,name=title,proto3" json:"title" example:"Rain" db:"title" validate:"max=256,nonnil"`                                             // @gotags: json:"title" example:"Rain" db:"title" validate:"max=256,nonnil"
	Duration        int64  `protobuf:"varint,5,opt,name=duration,proto3" json:"duration" example:"180" db:"duration" validate:"min=0,nonnil"`                                      // @gotags: json:"duration" example:"180" db:"duration" validate:"min=0,nonnil"
	CountLikes      int64  `protobuf:"varint,6,opt,name=count_likes,json=countLikes,proto3" json:"countLikes" example:"54" db:"count_likes" validate:"min=0,nonnil"`                // @gotags: json:"countLikes" example:"54" db:"count_likes" validate:"min=0,nonnil"
	CountListenings int64  `protobuf:"varint,7,opt,name=count_listenings,json=countListenings,proto3" json:"countListening" example:"15632" db:"count_listening" validate:"min=0,nonnil"` // @gotags: json:"countListening" example:"15632" db:"count_listening" validate:"min=0,nonnil"
}

func (x *Track) Reset() {
	*x = Track{}
	if protoimpl.UnsafeEnabled {
		mi := &file_track_trackProto_track_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Track) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Track) ProtoMessage() {}

func (x *Track) ProtoReflect() protoreflect.Message {
	mi := &file_track_trackProto_track_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Track.ProtoReflect.Descriptor instead.
func (*Track) Descriptor() ([]byte, []int) {
	return file_track_trackProto_track_proto_rawDescGZIP(), []int{0}
}

func (x *Track) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Track) GetAlbumId() int64 {
	if x != nil {
		return x.AlbumId
	}
	return 0
}

func (x *Track) GetArtistId() int64 {
	if x != nil {
		return x.ArtistId
	}
	return 0
}

func (x *Track) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Track) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Track) GetCountLikes() int64 {
	if x != nil {
		return x.CountLikes
	}
	return 0
}

func (x *Track) GetCountListenings() int64 {
	if x != nil {
		return x.CountListenings
	}
	return 0
}

type TrackDataTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id" example:"1"`                 // @gotags: json:"id" example:"1"
	Title      string `protobuf:"bytes,2,opt,name=title,proto3" json:"title" example:"Mercury"`            // @gotags: json:"title" example:"Mercury"
	Artist     string `protobuf:"bytes,3,opt,name=artist,proto3" json:"artist" example:"Hexed"`          // @gotags: json:"artist" example:"Hexed"
	Cover      string `protobuf:"bytes,4,opt,name=cover,proto3" json:"cover" example:"assets/track_1.png"`            // @gotags: json:"cover" example:"assets/track_1.png"
	Src        string `protobuf:"bytes,5,opt,name=src,proto3" json:"src" example:"assets/track_1.mp4"`                // @gotags: json:"src" example:"assets/track_1.mp4"
	Likes      int64  `protobuf:"varint,6,opt,name=likes,proto3" json:"likes" example:"5"`           // @gotags: json:"likes" example:"5"
	Listenings int64  `protobuf:"varint,7,opt,name=listenings,proto3" json:"listenings" example:"500"` // @gotags: json:"listenings" example:"500"
	Duration   int64  `protobuf:"varint,8,opt,name=duration,proto3" json:"duration" example:"531"`     // @gotags: json:"duration" example:"531"
}

func (x *TrackDataTransfer) Reset() {
	*x = TrackDataTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_track_trackProto_track_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackDataTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackDataTransfer) ProtoMessage() {}

func (x *TrackDataTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_track_trackProto_track_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackDataTransfer.ProtoReflect.Descriptor instead.
func (*TrackDataTransfer) Descriptor() ([]byte, []int) {
	return file_track_trackProto_track_proto_rawDescGZIP(), []int{1}
}

func (x *TrackDataTransfer) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TrackDataTransfer) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TrackDataTransfer) GetArtist() string {
	if x != nil {
		return x.Artist
	}
	return ""
}

func (x *TrackDataTransfer) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *TrackDataTransfer) GetSrc() string {
	if x != nil {
		return x.Src
	}
	return ""
}

func (x *TrackDataTransfer) GetLikes() int64 {
	if x != nil {
		return x.Likes
	}
	return 0
}

func (x *TrackDataTransfer) GetListenings() int64 {
	if x != nil {
		return x.Listenings
	}
	return 0
}

func (x *TrackDataTransfer) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type TrackUseCaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *TrackDataTransfer `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TrackUseCaseResponse) Reset() {
	*x = TrackUseCaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_track_trackProto_track_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackUseCaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackUseCaseResponse) ProtoMessage() {}

func (x *TrackUseCaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_track_trackProto_track_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackUseCaseResponse.ProtoReflect.Descriptor instead.
func (*TrackUseCaseResponse) Descriptor() ([]byte, []int) {
	return file_track_trackProto_track_proto_rawDescGZIP(), []int{2}
}

func (x *TrackUseCaseResponse) GetData() *TrackDataTransfer {
	if x != nil {
		return x.Data
	}
	return nil
}

type TracksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tracks []*Track `protobuf:"bytes,1,rep,name=tracks,proto3" json:"tracks,omitempty"`
}

func (x *TracksResponse) Reset() {
	*x = TracksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_track_trackProto_track_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TracksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracksResponse) ProtoMessage() {}

func (x *TracksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_track_trackProto_track_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracksResponse.ProtoReflect.Descriptor instead.
func (*TracksResponse) Descriptor() ([]byte, []int) {
	return file_track_trackProto_track_proto_rawDescGZIP(), []int{3}
}

func (x *TracksResponse) GetTracks() []*Track {
	if x != nil {
		return x.Tracks
	}
	return nil
}

var File_track_trackProto_track_proto protoreflect.FileDescriptor

var file_track_trackProto_track_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x22, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcd, 0x01, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61,
	0x72, 0x74, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xcb, 0x01, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x12, 0x10, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73,
	0x72, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6b, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x6c, 0x69, 0x6b, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x44, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x55, 0x73, 0x65,
	0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x36, 0x0a, 0x0e, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x06,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x06, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x73, 0x32, 0xc4, 0x07, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x43,
	0x61, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x15, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3b,
	0x0a, 0x09, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x49, 0x64, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x14, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x49, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x06, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x0c, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x30, 0x0a,
	0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0c, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2e,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x32, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x0e, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x49, 0x64, 0x41, 0x72, 0x67, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x29, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x0e,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x49, 0x64, 0x41, 0x72, 0x67, 0x1a, 0x0c,
	0x2e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x3d,
	0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x15, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x6c,
	0x62, 0x75, 0x6d, 0x12, 0x0e, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x49, 0x64,
	0x41, 0x72, 0x67, 0x1a, 0x15, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x1a,
	0x47, 0x65, 0x74, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73,
	0x46, 0x72, 0x6f, 0x6d, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x49, 0x64, 0x41, 0x72, 0x67, 0x1a, 0x15, 0x2e, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x14, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3b,
	0x0a, 0x04, 0x4c, 0x69, 0x6b, 0x65, 0x12, 0x19, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x41, 0x72,
	0x67, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x06, 0x4c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x12, 0x0e, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x49, 0x64, 0x41, 0x72, 0x67, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x3c, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x79, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x12, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x41, 0x72, 0x67, 0x1a, 0x15, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x37, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x12, 0x0e, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x49, 0x64, 0x41, 0x72, 0x67, 0x1a, 0x15, 0x2e,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x46,
	0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x12, 0x19, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64,
	0x41, 0x72, 0x67, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4a, 0x0a,
	0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x73, 0x12, 0x19, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x41, 0x72, 0x67, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x50, 0x5a, 0x4e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x61, 0x72, 0x6b, 0x2d,
	0x6d, 0x61, 0x69, 0x6c, 0x2d, 0x72, 0x75, 0x2f, 0x32, 0x30, 0x32, 0x32, 0x5f, 0x31, 0x5f, 0x57,
	0x61, 0x76, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x2f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_track_trackProto_track_proto_rawDescOnce sync.Once
	file_track_trackProto_track_proto_rawDescData = file_track_trackProto_track_proto_rawDesc
)

func file_track_trackProto_track_proto_rawDescGZIP() []byte {
	file_track_trackProto_track_proto_rawDescOnce.Do(func() {
		file_track_trackProto_track_proto_rawDescData = protoimpl.X.CompressGZIP(file_track_trackProto_track_proto_rawDescData)
	})
	return file_track_trackProto_track_proto_rawDescData
}

var file_track_trackProto_track_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_track_trackProto_track_proto_goTypes = []interface{}{
	(*Track)(nil),                         // 0: track.Track
	(*TrackDataTransfer)(nil),             // 1: track.TrackDataTransfer
	(*TrackUseCaseResponse)(nil),          // 2: track.TrackUseCaseResponse
	(*TracksResponse)(nil),                // 3: track.TracksResponse
	(*empty.Empty)(nil),                   // 4: google.protobuf.Empty
	(*gatewayProto.IdArg)(nil),            // 5: gateway.IdArg
	(*gatewayProto.UserIdTrackIdArg)(nil), // 6: gateway.UserIdTrackIdArg
	(*gatewayProto.StringArg)(nil),        // 7: gateway.StringArg
	(*gatewayProto.IntResponse)(nil),      // 8: gateway.IntResponse
}
var file_track_trackProto_track_proto_depIdxs = []int32{
	1,  // 0: track.TrackUseCaseResponse.data:type_name -> track.TrackDataTransfer
	0,  // 1: track.TracksResponse.tracks:type_name -> track.Track
	4,  // 2: track.TrackUseCase.GetAll:input_type -> google.protobuf.Empty
	4,  // 3: track.TrackUseCase.GetLastId:input_type -> google.protobuf.Empty
	0,  // 4: track.TrackUseCase.Create:input_type -> track.Track
	0,  // 5: track.TrackUseCase.Update:input_type -> track.Track
	5,  // 6: track.TrackUseCase.Delete:input_type -> gateway.IdArg
	5,  // 7: track.TrackUseCase.GetById:input_type -> gateway.IdArg
	4,  // 8: track.TrackUseCase.GetPopular:input_type -> google.protobuf.Empty
	5,  // 9: track.TrackUseCase.GetTracksFromAlbum:input_type -> gateway.IdArg
	5,  // 10: track.TrackUseCase.GetPopularTracksFromArtist:input_type -> gateway.IdArg
	4,  // 11: track.TrackUseCase.GetSize:input_type -> google.protobuf.Empty
	6,  // 12: track.TrackUseCase.Like:input_type -> gateway.UserIdTrackIdArg
	5,  // 13: track.TrackUseCase.Listen:input_type -> gateway.IdArg
	7,  // 14: track.TrackUseCase.SearchByTitle:input_type -> gateway.StringArg
	5,  // 15: track.TrackUseCase.GetFavorites:input_type -> gateway.IdArg
	6,  // 16: track.TrackUseCase.AddToFavorites:input_type -> gateway.UserIdTrackIdArg
	6,  // 17: track.TrackUseCase.RemoveFromFavorites:input_type -> gateway.UserIdTrackIdArg
	3,  // 18: track.TrackUseCase.GetAll:output_type -> track.TracksResponse
	8,  // 19: track.TrackUseCase.GetLastId:output_type -> gateway.IntResponse
	4,  // 20: track.TrackUseCase.Create:output_type -> google.protobuf.Empty
	4,  // 21: track.TrackUseCase.Update:output_type -> google.protobuf.Empty
	4,  // 22: track.TrackUseCase.Delete:output_type -> google.protobuf.Empty
	0,  // 23: track.TrackUseCase.GetById:output_type -> track.Track
	3,  // 24: track.TrackUseCase.GetPopular:output_type -> track.TracksResponse
	3,  // 25: track.TrackUseCase.GetTracksFromAlbum:output_type -> track.TracksResponse
	3,  // 26: track.TrackUseCase.GetPopularTracksFromArtist:output_type -> track.TracksResponse
	8,  // 27: track.TrackUseCase.GetSize:output_type -> gateway.IntResponse
	4,  // 28: track.TrackUseCase.Like:output_type -> google.protobuf.Empty
	4,  // 29: track.TrackUseCase.Listen:output_type -> google.protobuf.Empty
	3,  // 30: track.TrackUseCase.SearchByTitle:output_type -> track.TracksResponse
	3,  // 31: track.TrackUseCase.GetFavorites:output_type -> track.TracksResponse
	4,  // 32: track.TrackUseCase.AddToFavorites:output_type -> google.protobuf.Empty
	4,  // 33: track.TrackUseCase.RemoveFromFavorites:output_type -> google.protobuf.Empty
	18, // [18:34] is the sub-list for method output_type
	2,  // [2:18] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_track_trackProto_track_proto_init() }
func file_track_trackProto_track_proto_init() {
	if File_track_trackProto_track_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_track_trackProto_track_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Track); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_track_trackProto_track_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackDataTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_track_trackProto_track_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackUseCaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_track_trackProto_track_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TracksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_track_trackProto_track_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_track_trackProto_track_proto_goTypes,
		DependencyIndexes: file_track_trackProto_track_proto_depIdxs,
		MessageInfos:      file_track_trackProto_track_proto_msgTypes,
	}.Build()
	File_track_trackProto_track_proto = out.File
	file_track_trackProto_track_proto_rawDesc = nil
	file_track_trackProto_track_proto_goTypes = nil
	file_track_trackProto_track_proto_depIdxs = nil
}
