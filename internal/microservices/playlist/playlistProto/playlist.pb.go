// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.12.4
// source: playlist/playlistProto/playlist.proto

package playlistProto

import (
	gatewayProto "github.com/go-park-mail-ru/2022_1_Wave/internal/microservices/gateway/gatewayProto"
	trackProto "github.com/go-park-mail-ru/2022_1_Wave/internal/microservices/track/trackProto"
	empty "github.com/golang/protobuf/ptypes/empty"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Playlist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id" example:"4" db:"id" validate:"min=0"`                     // @gotags: json:"id" example:"4" db:"id" validate:"min=0"
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title" example:"Rain" db:"title" validate:"max=256,nonnil"` // @gotags: json:"title" example:"Rain" db:"title" validate:"max=256,nonnil"
}

func (x *Playlist) Reset() {
	*x = Playlist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playlist_playlistProto_playlist_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Playlist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Playlist) ProtoMessage() {}

func (x *Playlist) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_playlistProto_playlist_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Playlist.ProtoReflect.Descriptor instead.
func (*Playlist) Descriptor() ([]byte, []int) {
	return file_playlist_playlistProto_playlist_proto_rawDescGZIP(), []int{0}
}

func (x *Playlist) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Playlist) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type UserPlaylist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId" example:"4" db:"user_id" validate:"min=0, nonnil"`             // @gotags: json:"userId" example:"4" db:"user_id" validate:"min=0, nonnil"
	PlaylistId int64 `protobuf:"varint,2,opt,name=playlistId,proto3" json:"playlistId" example:"3" db:"playlist_id" validate:"min=0, nonnil"` // @gotags: json:"playlistId" example:"3" db:"playlist_id" validate:"min=0, nonnil"
}

func (x *UserPlaylist) Reset() {
	*x = UserPlaylist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playlist_playlistProto_playlist_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPlaylist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPlaylist) ProtoMessage() {}

func (x *UserPlaylist) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_playlistProto_playlist_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPlaylist.ProtoReflect.Descriptor instead.
func (*UserPlaylist) Descriptor() ([]byte, []int) {
	return file_playlist_playlistProto_playlist_proto_rawDescGZIP(), []int{1}
}

func (x *UserPlaylist) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserPlaylist) GetPlaylistId() int64 {
	if x != nil {
		return x.PlaylistId
	}
	return 0
}

type PlaylistDataTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int64                           `protobuf:"varint,1,opt,name=id,proto3" json:"id" example:"4"`         // @gotags: json:"id" example:"4"
	Title  string                          `protobuf:"bytes,2,opt,name=title,proto3" json:"title" example:"Rain"` // @gotags: json:"title" example:"Rain"
	Tracks []*trackProto.TrackDataTransfer `protobuf:"bytes,3,rep,name=tracks,proto3" json:"tracks,omitempty"`
}

func (x *PlaylistDataTransfer) Reset() {
	*x = PlaylistDataTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playlist_playlistProto_playlist_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaylistDataTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaylistDataTransfer) ProtoMessage() {}

func (x *PlaylistDataTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_playlistProto_playlist_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaylistDataTransfer.ProtoReflect.Descriptor instead.
func (*PlaylistDataTransfer) Descriptor() ([]byte, []int) {
	return file_playlist_playlistProto_playlist_proto_rawDescGZIP(), []int{2}
}

func (x *PlaylistDataTransfer) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PlaylistDataTransfer) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PlaylistDataTransfer) GetTracks() []*trackProto.TrackDataTransfer {
	if x != nil {
		return x.Tracks
	}
	return nil
}

type PlaylistUseCaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *PlaylistDataTransfer `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PlaylistUseCaseResponse) Reset() {
	*x = PlaylistUseCaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playlist_playlistProto_playlist_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaylistUseCaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaylistUseCaseResponse) ProtoMessage() {}

func (x *PlaylistUseCaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_playlistProto_playlist_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaylistUseCaseResponse.ProtoReflect.Descriptor instead.
func (*PlaylistUseCaseResponse) Descriptor() ([]byte, []int) {
	return file_playlist_playlistProto_playlist_proto_rawDescGZIP(), []int{3}
}

func (x *PlaylistUseCaseResponse) GetData() *PlaylistDataTransfer {
	if x != nil {
		return x.Data
	}
	return nil
}

type PlaylistsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Playlists []*Playlist `protobuf:"bytes,1,rep,name=playlists,proto3" json:"playlists,omitempty"`
}

func (x *PlaylistsResponse) Reset() {
	*x = PlaylistsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playlist_playlistProto_playlist_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaylistsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaylistsResponse) ProtoMessage() {}

func (x *PlaylistsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_playlistProto_playlist_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaylistsResponse.ProtoReflect.Descriptor instead.
func (*PlaylistsResponse) Descriptor() ([]byte, []int) {
	return file_playlist_playlistProto_playlist_proto_rawDescGZIP(), []int{4}
}

func (x *PlaylistsResponse) GetPlaylists() []*Playlist {
	if x != nil {
		return x.Playlists
	}
	return nil
}

type UserIdPlaylistArg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int64     `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Playlist *Playlist `protobuf:"bytes,2,opt,name=playlist,proto3" json:"playlist,omitempty"`
}

func (x *UserIdPlaylistArg) Reset() {
	*x = UserIdPlaylistArg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playlist_playlistProto_playlist_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserIdPlaylistArg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIdPlaylistArg) ProtoMessage() {}

func (x *UserIdPlaylistArg) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_playlistProto_playlist_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIdPlaylistArg.ProtoReflect.Descriptor instead.
func (*UserIdPlaylistArg) Descriptor() ([]byte, []int) {
	return file_playlist_playlistProto_playlist_proto_rawDescGZIP(), []int{5}
}

func (x *UserIdPlaylistArg) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserIdPlaylistArg) GetPlaylist() *Playlist {
	if x != nil {
		return x.Playlist
	}
	return nil
}

type UserIdPlaylistIdArg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	PlaylistId int64 `protobuf:"varint,2,opt,name=playlistId,proto3" json:"playlistId,omitempty"`
}

func (x *UserIdPlaylistIdArg) Reset() {
	*x = UserIdPlaylistIdArg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playlist_playlistProto_playlist_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserIdPlaylistIdArg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIdPlaylistIdArg) ProtoMessage() {}

func (x *UserIdPlaylistIdArg) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_playlistProto_playlist_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIdPlaylistIdArg.ProtoReflect.Descriptor instead.
func (*UserIdPlaylistIdArg) Descriptor() ([]byte, []int) {
	return file_playlist_playlistProto_playlist_proto_rawDescGZIP(), []int{6}
}

func (x *UserIdPlaylistIdArg) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserIdPlaylistIdArg) GetPlaylistId() int64 {
	if x != nil {
		return x.PlaylistId
	}
	return 0
}

type UserIdPlaylistIdTracksArg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	PlaylistId int64 `protobuf:"varint,2,opt,name=playlistId,proto3" json:"playlistId,omitempty"`
	TrackId    int64 `protobuf:"varint,3,opt,name=track_id,json=trackId,proto3" json:"track_id,omitempty"`
}

func (x *UserIdPlaylistIdTracksArg) Reset() {
	*x = UserIdPlaylistIdTracksArg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playlist_playlistProto_playlist_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserIdPlaylistIdTracksArg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIdPlaylistIdTracksArg) ProtoMessage() {}

func (x *UserIdPlaylistIdTracksArg) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_playlistProto_playlist_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIdPlaylistIdTracksArg.ProtoReflect.Descriptor instead.
func (*UserIdPlaylistIdTracksArg) Descriptor() ([]byte, []int) {
	return file_playlist_playlistProto_playlist_proto_rawDescGZIP(), []int{7}
}

func (x *UserIdPlaylistIdTracksArg) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserIdPlaylistIdTracksArg) GetPlaylistId() int64 {
	if x != nil {
		return x.PlaylistId
	}
	return 0
}

func (x *UserIdPlaylistIdTracksArg) GetTrackId() int64 {
	if x != nil {
		return x.TrackId
	}
	return 0
}

type PlaylistIdTrackId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlaylistId int64 `protobuf:"varint,1,opt,name=playlistId,proto3" json:"playlistId" example:"4" db:"playlist_id" validate:"min=0"` // @gotags: json:"playlistId" example:"4" db:"playlist_id" validate:"min=0"
	TrackId    int64 `protobuf:"varint,2,opt,name=trackId,proto3" json:"trackId" example:"5" db:"track_id" validate:"min=0"`          // @gotags: json:"trackId" example:"5" db:"track_id" validate:"min=0"
}

func (x *PlaylistIdTrackId) Reset() {
	*x = PlaylistIdTrackId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playlist_playlistProto_playlist_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaylistIdTrackId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaylistIdTrackId) ProtoMessage() {}

func (x *PlaylistIdTrackId) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_playlistProto_playlist_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaylistIdTrackId.ProtoReflect.Descriptor instead.
func (*PlaylistIdTrackId) Descriptor() ([]byte, []int) {
	return file_playlist_playlistProto_playlist_proto_rawDescGZIP(), []int{8}
}

func (x *PlaylistIdTrackId) GetPlaylistId() int64 {
	if x != nil {
		return x.PlaylistId
	}
	return 0
}

func (x *PlaylistIdTrackId) GetTrackId() int64 {
	if x != nil {
		return x.TrackId
	}
	return 0
}

var File_playlist_playlistProto_playlist_proto protoreflect.FileDescriptor

var file_playlist_playlistProto_playlist_proto_rawDesc = []byte{
	0x0a, 0x25, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x79, 0x6c,
	0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73,
	0x74, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x30, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x22, 0x46, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c,
	0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x22, 0x6e, 0x0a, 0x14, 0x50, 0x6c,
	0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x52, 0x06, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x22, 0x4d, 0x0a, 0x17, 0x50, 0x6c,
	0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x45, 0x0a, 0x11, 0x50, 0x6c, 0x61,
	0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30,
	0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73,
	0x22, 0x5b, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69,
	0x73, 0x74, 0x41, 0x72, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a,
	0x08, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x6c,
	0x69, 0x73, 0x74, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x4d, 0x0a,
	0x13, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x49,
	0x64, 0x41, 0x72, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x22, 0x6e, 0x0a, 0x19,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x41, 0x72, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x11,
	0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x32, 0xfa, 0x06, 0x0a, 0x0f,
	0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x43, 0x61, 0x73, 0x65, 0x12,
	0x3f, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x1b, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x44, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4f, 0x66, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x49, 0x64, 0x41, 0x72, 0x67, 0x1a, 0x1b, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x14, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x49, 0x64,
	0x4f, 0x66, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x49, 0x64, 0x41, 0x72, 0x67, 0x1a, 0x14, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12,
	0x1b, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x67, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x50,
	0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73,
	0x74, 0x49, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x41, 0x72, 0x67, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x46, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x2e, 0x70,
	0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x50, 0x6c,
	0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x41, 0x72,
	0x67, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x06, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x41,
	0x72, 0x67, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x06,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1d, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74,
	0x49, 0x64, 0x41, 0x72, 0x67, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x2f, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x0e, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x49, 0x64, 0x41, 0x72, 0x67, 0x1a, 0x12, 0x2e, 0x70, 0x6c, 0x61,
	0x79, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x00,
	0x12, 0x4b, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x4f, 0x66, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69,
	0x73, 0x74, 0x49, 0x64, 0x41, 0x72, 0x67, 0x1a, 0x12, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x39, 0x0a,
	0x07, 0x47, 0x65, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x14, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53,
	0x69, 0x7a, 0x65, 0x4f, 0x66, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x0e, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x49, 0x64, 0x41, 0x72, 0x67,
	0x1a, 0x14, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x56, 0x5a, 0x54, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x61, 0x72, 0x6b, 0x2d, 0x6d,
	0x61, 0x69, 0x6c, 0x2d, 0x72, 0x75, 0x2f, 0x32, 0x30, 0x32, 0x32, 0x5f, 0x31, 0x5f, 0x57, 0x61,
	0x76, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69,
	0x73, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_playlist_playlistProto_playlist_proto_rawDescOnce sync.Once
	file_playlist_playlistProto_playlist_proto_rawDescData = file_playlist_playlistProto_playlist_proto_rawDesc
)

func file_playlist_playlistProto_playlist_proto_rawDescGZIP() []byte {
	file_playlist_playlistProto_playlist_proto_rawDescOnce.Do(func() {
		file_playlist_playlistProto_playlist_proto_rawDescData = protoimpl.X.CompressGZIP(file_playlist_playlistProto_playlist_proto_rawDescData)
	})
	return file_playlist_playlistProto_playlist_proto_rawDescData
}

var file_playlist_playlistProto_playlist_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_playlist_playlistProto_playlist_proto_goTypes = []interface{}{
	(*Playlist)(nil),                     // 0: playlist.Playlist
	(*UserPlaylist)(nil),                 // 1: playlist.UserPlaylist
	(*PlaylistDataTransfer)(nil),         // 2: playlist.PlaylistDataTransfer
	(*PlaylistUseCaseResponse)(nil),      // 3: playlist.PlaylistUseCaseResponse
	(*PlaylistsResponse)(nil),            // 4: playlist.PlaylistsResponse
	(*UserIdPlaylistArg)(nil),            // 5: playlist.UserIdPlaylistArg
	(*UserIdPlaylistIdArg)(nil),          // 6: playlist.UserIdPlaylistIdArg
	(*UserIdPlaylistIdTracksArg)(nil),    // 7: playlist.UserIdPlaylistIdTracksArg
	(*PlaylistIdTrackId)(nil),            // 8: playlist.PlaylistIdTrackId
	(*trackProto.TrackDataTransfer)(nil), // 9: track.TrackDataTransfer
	(*empty.Empty)(nil),                  // 10: google.protobuf.Empty
	(*gatewayProto.IdArg)(nil),           // 11: gateway.IdArg
	(*gatewayProto.IntResponse)(nil),     // 12: gateway.IntResponse
}
var file_playlist_playlistProto_playlist_proto_depIdxs = []int32{
	9,  // 0: playlist.PlaylistDataTransfer.tracks:type_name -> track.TrackDataTransfer
	2,  // 1: playlist.PlaylistUseCaseResponse.data:type_name -> playlist.PlaylistDataTransfer
	0,  // 2: playlist.PlaylistsResponse.playlists:type_name -> playlist.Playlist
	0,  // 3: playlist.UserIdPlaylistArg.playlist:type_name -> playlist.Playlist
	10, // 4: playlist.PlaylistUseCase.GetAll:input_type -> google.protobuf.Empty
	11, // 5: playlist.PlaylistUseCase.GetAllOfCurrentUser:input_type -> gateway.IdArg
	10, // 6: playlist.PlaylistUseCase.GetLastId:input_type -> google.protobuf.Empty
	11, // 7: playlist.PlaylistUseCase.GetLastIdOfCurrentUser:input_type -> gateway.IdArg
	5,  // 8: playlist.PlaylistUseCase.Create:input_type -> playlist.UserIdPlaylistArg
	7,  // 9: playlist.PlaylistUseCase.AddToPlaylist:input_type -> playlist.UserIdPlaylistIdTracksArg
	7,  // 10: playlist.PlaylistUseCase.RemoveFromPlaylist:input_type -> playlist.UserIdPlaylistIdTracksArg
	5,  // 11: playlist.PlaylistUseCase.Update:input_type -> playlist.UserIdPlaylistArg
	6,  // 12: playlist.PlaylistUseCase.Delete:input_type -> playlist.UserIdPlaylistIdArg
	11, // 13: playlist.PlaylistUseCase.GetById:input_type -> gateway.IdArg
	6,  // 14: playlist.PlaylistUseCase.GetByIdOfCurrentUser:input_type -> playlist.UserIdPlaylistIdArg
	10, // 15: playlist.PlaylistUseCase.GetSize:input_type -> google.protobuf.Empty
	11, // 16: playlist.PlaylistUseCase.GetSizeOfCurrentUser:input_type -> gateway.IdArg
	4,  // 17: playlist.PlaylistUseCase.GetAll:output_type -> playlist.PlaylistsResponse
	4,  // 18: playlist.PlaylistUseCase.GetAllOfCurrentUser:output_type -> playlist.PlaylistsResponse
	12, // 19: playlist.PlaylistUseCase.GetLastId:output_type -> gateway.IntResponse
	12, // 20: playlist.PlaylistUseCase.GetLastIdOfCurrentUser:output_type -> gateway.IntResponse
	10, // 21: playlist.PlaylistUseCase.Create:output_type -> google.protobuf.Empty
	10, // 22: playlist.PlaylistUseCase.AddToPlaylist:output_type -> google.protobuf.Empty
	10, // 23: playlist.PlaylistUseCase.RemoveFromPlaylist:output_type -> google.protobuf.Empty
	10, // 24: playlist.PlaylistUseCase.Update:output_type -> google.protobuf.Empty
	10, // 25: playlist.PlaylistUseCase.Delete:output_type -> google.protobuf.Empty
	0,  // 26: playlist.PlaylistUseCase.GetById:output_type -> playlist.Playlist
	0,  // 27: playlist.PlaylistUseCase.GetByIdOfCurrentUser:output_type -> playlist.Playlist
	12, // 28: playlist.PlaylistUseCase.GetSize:output_type -> gateway.IntResponse
	12, // 29: playlist.PlaylistUseCase.GetSizeOfCurrentUser:output_type -> gateway.IntResponse
	17, // [17:30] is the sub-list for method output_type
	4,  // [4:17] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_playlist_playlistProto_playlist_proto_init() }
func file_playlist_playlistProto_playlist_proto_init() {
	if File_playlist_playlistProto_playlist_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_playlist_playlistProto_playlist_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Playlist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playlist_playlistProto_playlist_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPlaylist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playlist_playlistProto_playlist_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaylistDataTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playlist_playlistProto_playlist_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaylistUseCaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playlist_playlistProto_playlist_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaylistsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playlist_playlistProto_playlist_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserIdPlaylistArg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playlist_playlistProto_playlist_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserIdPlaylistIdArg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playlist_playlistProto_playlist_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserIdPlaylistIdTracksArg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playlist_playlistProto_playlist_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaylistIdTrackId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_playlist_playlistProto_playlist_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_playlist_playlistProto_playlist_proto_goTypes,
		DependencyIndexes: file_playlist_playlistProto_playlist_proto_depIdxs,
		MessageInfos:      file_playlist_playlistProto_playlist_proto_msgTypes,
	}.Build()
	File_playlist_playlistProto_playlist_proto = out.File
	file_playlist_playlistProto_playlist_proto_rawDesc = nil
	file_playlist_playlistProto_playlist_proto_goTypes = nil
	file_playlist_playlistProto_playlist_proto_depIdxs = nil
}
