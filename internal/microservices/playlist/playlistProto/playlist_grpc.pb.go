// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: playlist/playlistProto/playlist.proto

package playlistProto

import (
	context "context"
	gatewayProto "github.com/go-park-mail-ru/2022_1_Wave/internal/microservices/gateway/gatewayProto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlaylistUseCaseClient is the client API for PlaylistUseCase service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlaylistUseCaseClient interface {
	GetAll(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PlaylistsResponse, error)
	GetAllOfCurrentUser(ctx context.Context, in *gatewayProto.IdArg, opts ...grpc.CallOption) (*PlaylistsResponse, error)
	GetLastId(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*gatewayProto.IntResponse, error)
	GetLastIdOfCurrentUser(ctx context.Context, in *gatewayProto.IdArg, opts ...grpc.CallOption) (*gatewayProto.IntResponse, error)
	Create(ctx context.Context, in *UserIdPlaylistArg, opts ...grpc.CallOption) (*empty.Empty, error)
	AddToPlaylist(ctx context.Context, in *UserIdPlaylistIdTracksArg, opts ...grpc.CallOption) (*empty.Empty, error)
	RemoveFromPlaylist(ctx context.Context, in *UserIdPlaylistIdTracksArg, opts ...grpc.CallOption) (*empty.Empty, error)
	Update(ctx context.Context, in *UserIdPlaylistArg, opts ...grpc.CallOption) (*empty.Empty, error)
	Delete(ctx context.Context, in *UserIdPlaylistIdArg, opts ...grpc.CallOption) (*empty.Empty, error)
	GetById(ctx context.Context, in *gatewayProto.IdArg, opts ...grpc.CallOption) (*Playlist, error)
	GetByIdOfCurrentUser(ctx context.Context, in *UserIdPlaylistIdArg, opts ...grpc.CallOption) (*Playlist, error)
	GetSize(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*gatewayProto.IntResponse, error)
	GetSizeOfCurrentUser(ctx context.Context, in *gatewayProto.IdArg, opts ...grpc.CallOption) (*gatewayProto.IntResponse, error)
}

type playlistUseCaseClient struct {
	cc grpc.ClientConnInterface
}

func NewPlaylistUseCaseClient(cc grpc.ClientConnInterface) PlaylistUseCaseClient {
	return &playlistUseCaseClient{cc}
}

func (c *playlistUseCaseClient) GetAll(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PlaylistsResponse, error) {
	out := new(PlaylistsResponse)
	err := c.cc.Invoke(ctx, "/playlist.PlaylistUseCase/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistUseCaseClient) GetAllOfCurrentUser(ctx context.Context, in *gatewayProto.IdArg, opts ...grpc.CallOption) (*PlaylistsResponse, error) {
	out := new(PlaylistsResponse)
	err := c.cc.Invoke(ctx, "/playlist.PlaylistUseCase/GetAllOfCurrentUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistUseCaseClient) GetLastId(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*gatewayProto.IntResponse, error) {
	out := new(gatewayProto.IntResponse)
	err := c.cc.Invoke(ctx, "/playlist.PlaylistUseCase/GetLastId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistUseCaseClient) GetLastIdOfCurrentUser(ctx context.Context, in *gatewayProto.IdArg, opts ...grpc.CallOption) (*gatewayProto.IntResponse, error) {
	out := new(gatewayProto.IntResponse)
	err := c.cc.Invoke(ctx, "/playlist.PlaylistUseCase/GetLastIdOfCurrentUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistUseCaseClient) Create(ctx context.Context, in *UserIdPlaylistArg, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/playlist.PlaylistUseCase/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistUseCaseClient) AddToPlaylist(ctx context.Context, in *UserIdPlaylistIdTracksArg, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/playlist.PlaylistUseCase/AddToPlaylist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistUseCaseClient) RemoveFromPlaylist(ctx context.Context, in *UserIdPlaylistIdTracksArg, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/playlist.PlaylistUseCase/RemoveFromPlaylist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistUseCaseClient) Update(ctx context.Context, in *UserIdPlaylistArg, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/playlist.PlaylistUseCase/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistUseCaseClient) Delete(ctx context.Context, in *UserIdPlaylistIdArg, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/playlist.PlaylistUseCase/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistUseCaseClient) GetById(ctx context.Context, in *gatewayProto.IdArg, opts ...grpc.CallOption) (*Playlist, error) {
	out := new(Playlist)
	err := c.cc.Invoke(ctx, "/playlist.PlaylistUseCase/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistUseCaseClient) GetByIdOfCurrentUser(ctx context.Context, in *UserIdPlaylistIdArg, opts ...grpc.CallOption) (*Playlist, error) {
	out := new(Playlist)
	err := c.cc.Invoke(ctx, "/playlist.PlaylistUseCase/GetByIdOfCurrentUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistUseCaseClient) GetSize(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*gatewayProto.IntResponse, error) {
	out := new(gatewayProto.IntResponse)
	err := c.cc.Invoke(ctx, "/playlist.PlaylistUseCase/GetSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistUseCaseClient) GetSizeOfCurrentUser(ctx context.Context, in *gatewayProto.IdArg, opts ...grpc.CallOption) (*gatewayProto.IntResponse, error) {
	out := new(gatewayProto.IntResponse)
	err := c.cc.Invoke(ctx, "/playlist.PlaylistUseCase/GetSizeOfCurrentUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlaylistUseCaseServer is the server API for PlaylistUseCase service.
// All implementations must embed UnimplementedPlaylistUseCaseServer
// for forward compatibility
type PlaylistUseCaseServer interface {
	GetAll(context.Context, *empty.Empty) (*PlaylistsResponse, error)
	GetAllOfCurrentUser(context.Context, *gatewayProto.IdArg) (*PlaylistsResponse, error)
	GetLastId(context.Context, *empty.Empty) (*gatewayProto.IntResponse, error)
	GetLastIdOfCurrentUser(context.Context, *gatewayProto.IdArg) (*gatewayProto.IntResponse, error)
	Create(context.Context, *UserIdPlaylistArg) (*empty.Empty, error)
	AddToPlaylist(context.Context, *UserIdPlaylistIdTracksArg) (*empty.Empty, error)
	RemoveFromPlaylist(context.Context, *UserIdPlaylistIdTracksArg) (*empty.Empty, error)
	Update(context.Context, *UserIdPlaylistArg) (*empty.Empty, error)
	Delete(context.Context, *UserIdPlaylistIdArg) (*empty.Empty, error)
	GetById(context.Context, *gatewayProto.IdArg) (*Playlist, error)
	GetByIdOfCurrentUser(context.Context, *UserIdPlaylistIdArg) (*Playlist, error)
	GetSize(context.Context, *empty.Empty) (*gatewayProto.IntResponse, error)
	GetSizeOfCurrentUser(context.Context, *gatewayProto.IdArg) (*gatewayProto.IntResponse, error)
	mustEmbedUnimplementedPlaylistUseCaseServer()
}

// UnimplementedPlaylistUseCaseServer must be embedded to have forward compatible implementations.
type UnimplementedPlaylistUseCaseServer struct {
}

func (UnimplementedPlaylistUseCaseServer) GetAll(context.Context, *empty.Empty) (*PlaylistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedPlaylistUseCaseServer) GetAllOfCurrentUser(context.Context, *gatewayProto.IdArg) (*PlaylistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllOfCurrentUser not implemented")
}
func (UnimplementedPlaylistUseCaseServer) GetLastId(context.Context, *empty.Empty) (*gatewayProto.IntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastId not implemented")
}
func (UnimplementedPlaylistUseCaseServer) GetLastIdOfCurrentUser(context.Context, *gatewayProto.IdArg) (*gatewayProto.IntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastIdOfCurrentUser not implemented")
}
func (UnimplementedPlaylistUseCaseServer) Create(context.Context, *UserIdPlaylistArg) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPlaylistUseCaseServer) AddToPlaylist(context.Context, *UserIdPlaylistIdTracksArg) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToPlaylist not implemented")
}
func (UnimplementedPlaylistUseCaseServer) RemoveFromPlaylist(context.Context, *UserIdPlaylistIdTracksArg) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromPlaylist not implemented")
}
func (UnimplementedPlaylistUseCaseServer) Update(context.Context, *UserIdPlaylistArg) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPlaylistUseCaseServer) Delete(context.Context, *UserIdPlaylistIdArg) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPlaylistUseCaseServer) GetById(context.Context, *gatewayProto.IdArg) (*Playlist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedPlaylistUseCaseServer) GetByIdOfCurrentUser(context.Context, *UserIdPlaylistIdArg) (*Playlist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByIdOfCurrentUser not implemented")
}
func (UnimplementedPlaylistUseCaseServer) GetSize(context.Context, *empty.Empty) (*gatewayProto.IntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSize not implemented")
}
func (UnimplementedPlaylistUseCaseServer) GetSizeOfCurrentUser(context.Context, *gatewayProto.IdArg) (*gatewayProto.IntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSizeOfCurrentUser not implemented")
}
func (UnimplementedPlaylistUseCaseServer) mustEmbedUnimplementedPlaylistUseCaseServer() {}

// UnsafePlaylistUseCaseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlaylistUseCaseServer will
// result in compilation errors.
type UnsafePlaylistUseCaseServer interface {
	mustEmbedUnimplementedPlaylistUseCaseServer()
}

func RegisterPlaylistUseCaseServer(s grpc.ServiceRegistrar, srv PlaylistUseCaseServer) {
	s.RegisterService(&PlaylistUseCase_ServiceDesc, srv)
}

func _PlaylistUseCase_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistUseCaseServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playlist.PlaylistUseCase/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistUseCaseServer).GetAll(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistUseCase_GetAllOfCurrentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(gatewayProto.IdArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistUseCaseServer).GetAllOfCurrentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playlist.PlaylistUseCase/GetAllOfCurrentUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistUseCaseServer).GetAllOfCurrentUser(ctx, req.(*gatewayProto.IdArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistUseCase_GetLastId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistUseCaseServer).GetLastId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playlist.PlaylistUseCase/GetLastId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistUseCaseServer).GetLastId(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistUseCase_GetLastIdOfCurrentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(gatewayProto.IdArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistUseCaseServer).GetLastIdOfCurrentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playlist.PlaylistUseCase/GetLastIdOfCurrentUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistUseCaseServer).GetLastIdOfCurrentUser(ctx, req.(*gatewayProto.IdArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistUseCase_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdPlaylistArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistUseCaseServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playlist.PlaylistUseCase/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistUseCaseServer).Create(ctx, req.(*UserIdPlaylistArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistUseCase_AddToPlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdPlaylistIdTracksArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistUseCaseServer).AddToPlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playlist.PlaylistUseCase/AddToPlaylist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistUseCaseServer).AddToPlaylist(ctx, req.(*UserIdPlaylistIdTracksArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistUseCase_RemoveFromPlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdPlaylistIdTracksArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistUseCaseServer).RemoveFromPlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playlist.PlaylistUseCase/RemoveFromPlaylist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistUseCaseServer).RemoveFromPlaylist(ctx, req.(*UserIdPlaylistIdTracksArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistUseCase_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdPlaylistArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistUseCaseServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playlist.PlaylistUseCase/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistUseCaseServer).Update(ctx, req.(*UserIdPlaylistArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistUseCase_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdPlaylistIdArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistUseCaseServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playlist.PlaylistUseCase/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistUseCaseServer).Delete(ctx, req.(*UserIdPlaylistIdArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistUseCase_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(gatewayProto.IdArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistUseCaseServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playlist.PlaylistUseCase/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistUseCaseServer).GetById(ctx, req.(*gatewayProto.IdArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistUseCase_GetByIdOfCurrentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdPlaylistIdArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistUseCaseServer).GetByIdOfCurrentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playlist.PlaylistUseCase/GetByIdOfCurrentUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistUseCaseServer).GetByIdOfCurrentUser(ctx, req.(*UserIdPlaylistIdArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistUseCase_GetSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistUseCaseServer).GetSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playlist.PlaylistUseCase/GetSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistUseCaseServer).GetSize(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistUseCase_GetSizeOfCurrentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(gatewayProto.IdArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistUseCaseServer).GetSizeOfCurrentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playlist.PlaylistUseCase/GetSizeOfCurrentUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistUseCaseServer).GetSizeOfCurrentUser(ctx, req.(*gatewayProto.IdArg))
	}
	return interceptor(ctx, in, info, handler)
}

// PlaylistUseCase_ServiceDesc is the grpc.ServiceDesc for PlaylistUseCase service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlaylistUseCase_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "playlist.PlaylistUseCase",
	HandlerType: (*PlaylistUseCaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _PlaylistUseCase_GetAll_Handler,
		},
		{
			MethodName: "GetAllOfCurrentUser",
			Handler:    _PlaylistUseCase_GetAllOfCurrentUser_Handler,
		},
		{
			MethodName: "GetLastId",
			Handler:    _PlaylistUseCase_GetLastId_Handler,
		},
		{
			MethodName: "GetLastIdOfCurrentUser",
			Handler:    _PlaylistUseCase_GetLastIdOfCurrentUser_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _PlaylistUseCase_Create_Handler,
		},
		{
			MethodName: "AddToPlaylist",
			Handler:    _PlaylistUseCase_AddToPlaylist_Handler,
		},
		{
			MethodName: "RemoveFromPlaylist",
			Handler:    _PlaylistUseCase_RemoveFromPlaylist_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PlaylistUseCase_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PlaylistUseCase_Delete_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _PlaylistUseCase_GetById_Handler,
		},
		{
			MethodName: "GetByIdOfCurrentUser",
			Handler:    _PlaylistUseCase_GetByIdOfCurrentUser_Handler,
		},
		{
			MethodName: "GetSize",
			Handler:    _PlaylistUseCase_GetSize_Handler,
		},
		{
			MethodName: "GetSizeOfCurrentUser",
			Handler:    _PlaylistUseCase_GetSizeOfCurrentUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "playlist/playlistProto/playlist.proto",
}
