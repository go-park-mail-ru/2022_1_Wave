// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: linker/linkerProto/linker.proto

package linkerProto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LinkerUseCaseClient is the client API for LinkerUseCase service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LinkerUseCaseClient interface {
	Get(ctx context.Context, in *HashWrapper, opts ...grpc.CallOption) (*UrlWrapper, error)
	Create(ctx context.Context, in *UrlWrapper, opts ...grpc.CallOption) (*HashWrapper, error)
	Count(ctx context.Context, in *HashWrapper, opts ...grpc.CallOption) (*CountResponse, error)
}

type linkerUseCaseClient struct {
	cc grpc.ClientConnInterface
}

func NewLinkerUseCaseClient(cc grpc.ClientConnInterface) LinkerUseCaseClient {
	return &linkerUseCaseClient{cc}
}

func (c *linkerUseCaseClient) Get(ctx context.Context, in *HashWrapper, opts ...grpc.CallOption) (*UrlWrapper, error) {
	out := new(UrlWrapper)
	err := c.cc.Invoke(ctx, "/linker.LinkerUseCase/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkerUseCaseClient) Create(ctx context.Context, in *UrlWrapper, opts ...grpc.CallOption) (*HashWrapper, error) {
	out := new(HashWrapper)
	err := c.cc.Invoke(ctx, "/linker.LinkerUseCase/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkerUseCaseClient) Count(ctx context.Context, in *HashWrapper, opts ...grpc.CallOption) (*CountResponse, error) {
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, "/linker.LinkerUseCase/Count", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LinkerUseCaseServer is the server API for LinkerUseCase service.
// All implementations must embed UnimplementedLinkerUseCaseServer
// for forward compatibility
type LinkerUseCaseServer interface {
	Get(context.Context, *HashWrapper) (*UrlWrapper, error)
	Create(context.Context, *UrlWrapper) (*HashWrapper, error)
	Count(context.Context, *HashWrapper) (*CountResponse, error)
	mustEmbedUnimplementedLinkerUseCaseServer()
}

// UnimplementedLinkerUseCaseServer must be embedded to have forward compatible implementations.
type UnimplementedLinkerUseCaseServer struct {
}

func (UnimplementedLinkerUseCaseServer) Get(context.Context, *HashWrapper) (*UrlWrapper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedLinkerUseCaseServer) Create(context.Context, *UrlWrapper) (*HashWrapper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedLinkerUseCaseServer) Count(context.Context, *HashWrapper) (*CountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (UnimplementedLinkerUseCaseServer) mustEmbedUnimplementedLinkerUseCaseServer() {}

// UnsafeLinkerUseCaseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LinkerUseCaseServer will
// result in compilation errors.
type UnsafeLinkerUseCaseServer interface {
	mustEmbedUnimplementedLinkerUseCaseServer()
}

func RegisterLinkerUseCaseServer(s grpc.ServiceRegistrar, srv LinkerUseCaseServer) {
	s.RegisterService(&LinkerUseCase_ServiceDesc, srv)
}

func _LinkerUseCase_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HashWrapper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkerUseCaseServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/linker.LinkerUseCase/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkerUseCaseServer).Get(ctx, req.(*HashWrapper))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkerUseCase_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UrlWrapper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkerUseCaseServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/linker.LinkerUseCase/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkerUseCaseServer).Create(ctx, req.(*UrlWrapper))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkerUseCase_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HashWrapper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkerUseCaseServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/linker.LinkerUseCase/Count",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkerUseCaseServer).Count(ctx, req.(*HashWrapper))
	}
	return interceptor(ctx, in, info, handler)
}

// LinkerUseCase_ServiceDesc is the grpc.ServiceDesc for LinkerUseCase service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LinkerUseCase_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "linker.LinkerUseCase",
	HandlerType: (*LinkerUseCaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _LinkerUseCase_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _LinkerUseCase_Create_Handler,
		},
		{
			MethodName: "Count",
			Handler:    _LinkerUseCase_Count_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "linker/linkerProto/linker.proto",
}
