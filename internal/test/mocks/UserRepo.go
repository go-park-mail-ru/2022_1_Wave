// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	user_microservice_domain "github.com/go-park-mail-ru/2022_1_Wave/internal/microservices/user"
	mock "github.com/stretchr/testify/mock"
)

// UserRepo is an autogenerated mock type for the UserRepo type
type UserRepo struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *UserRepo) Delete(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSize provides a mock function with given fields:
func (_m *UserRepo) GetSize() (int, error) {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: user
func (_m *UserRepo) Insert(user *user_microservice_domain.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*user_microservice_domain.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectByEmail provides a mock function with given fields: email
func (_m *UserRepo) SelectByEmail(email string) (*user_microservice_domain.User, error) {
	ret := _m.Called(email)

	var r0 *user_microservice_domain.User
	if rf, ok := ret.Get(0).(func(string) *user_microservice_domain.User); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user_microservice_domain.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectByID provides a mock function with given fields: id
func (_m *UserRepo) SelectByID(id uint) (*user_microservice_domain.User, error) {
	ret := _m.Called(id)

	var r0 *user_microservice_domain.User
	if rf, ok := ret.Get(0).(func(uint) *user_microservice_domain.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user_microservice_domain.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectByUsername provides a mock function with given fields: username
func (_m *UserRepo) SelectByUsername(username string) (*user_microservice_domain.User, error) {
	ret := _m.Called(username)

	var r0 *user_microservice_domain.User
	if rf, ok := ret.Get(0).(func(string) *user_microservice_domain.User); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user_microservice_domain.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, user
func (_m *UserRepo) Update(id uint, user *user_microservice_domain.User) error {
	ret := _m.Called(id, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, *user_microservice_domain.User) error); ok {
		r0 = rf(id, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
