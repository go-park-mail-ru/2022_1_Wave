// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	playlistProto "github.com/go-park-mail-ru/2022_1_Wave/internal/microservices/playlist/playlistProto"
	mock "github.com/stretchr/testify/mock"
)

// PlaylistRepo is an autogenerated mock type for the PlaylistRepo type
type PlaylistRepo struct {
	mock.Mock
}

// Create provides a mock function with given fields: userId, playlist
func (_m *PlaylistRepo) Create(userId int64, playlist *playlistProto.Playlist) error {
	ret := _m.Called(userId, playlist)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, *playlistProto.Playlist) error); ok {
		r0 = rf(userId, playlist)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: userId, playlistId
func (_m *PlaylistRepo) Delete(userId int64, playlistId int64) error {
	ret := _m.Called(userId, playlistId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64) error); ok {
		r0 = rf(userId, playlistId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: userId
func (_m *PlaylistRepo) GetAll(userId int64) ([]*playlistProto.Playlist, error) {
	ret := _m.Called(userId)

	var r0 []*playlistProto.Playlist
	if rf, ok := ret.Get(0).(func(int64) []*playlistProto.Playlist); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*playlistProto.Playlist)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLastId provides a mock function with given fields: userId
func (_m *PlaylistRepo) GetLastId(userId int64) (int64, error) {
	ret := _m.Called(userId)

	var r0 int64
	if rf, ok := ret.Get(0).(func(int64) int64); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSize provides a mock function with given fields: userId
func (_m *PlaylistRepo) GetSize(userId int64) (int64, error) {
	ret := _m.Called(userId)

	var r0 int64
	if rf, ok := ret.Get(0).(func(int64) int64); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectByID provides a mock function with given fields: userId, playlistId
func (_m *PlaylistRepo) SelectByID(userId int64, playlistId int64) (*playlistProto.Playlist, error) {
	ret := _m.Called(userId, playlistId)

	var r0 *playlistProto.Playlist
	if rf, ok := ret.Get(0).(func(int64, int64) *playlistProto.Playlist); ok {
		r0 = rf(userId, playlistId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*playlistProto.Playlist)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(userId, playlistId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: userId, playlist
func (_m *PlaylistRepo) Update(userId int64, playlist *playlistProto.Playlist) error {
	ret := _m.Called(userId, playlist)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, *playlistProto.Playlist) error); ok {
		r0 = rf(userId, playlist)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
