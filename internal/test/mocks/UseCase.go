// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	albumProto "github.com/go-park-mail-ru/2022_1_Wave/internal/microservices/album/albumProto"
	mock "github.com/stretchr/testify/mock"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// AddToFavorites provides a mock function with given fields: userId, albumId
func (_m *UseCase) AddToFavorites(userId int64, albumId int64) error {
	ret := _m.Called(userId, albumId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64) error); ok {
		r0 = rf(userId, albumId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: _a0
func (_m *UseCase) Create(_a0 *albumProto.Album) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*albumProto.Album) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateCover provides a mock function with given fields: _a0
func (_m *UseCase) CreateCover(_a0 *albumProto.AlbumCover) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*albumProto.AlbumCover) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: _a0
func (_m *UseCase) Delete(_a0 int64) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCover provides a mock function with given fields: _a0
func (_m *UseCase) DeleteCover(_a0 int64) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAlbumsFromArtist provides a mock function with given fields: _a0
func (_m *UseCase) GetAlbumsFromArtist(_a0 int64) ([]*albumProto.AlbumDataTransfer, error) {
	ret := _m.Called(_a0)

	var r0 []*albumProto.AlbumDataTransfer
	if rf, ok := ret.Get(0).(func(int64) []*albumProto.AlbumDataTransfer); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*albumProto.AlbumDataTransfer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *UseCase) GetAll() ([]*albumProto.AlbumDataTransfer, error) {
	ret := _m.Called()

	var r0 []*albumProto.AlbumDataTransfer
	if rf, ok := ret.Get(0).(func() []*albumProto.AlbumDataTransfer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*albumProto.AlbumDataTransfer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllCovers provides a mock function with given fields:
func (_m *UseCase) GetAllCovers() ([]*albumProto.AlbumCoverDataTransfer, error) {
	ret := _m.Called()

	var r0 []*albumProto.AlbumCoverDataTransfer
	if rf, ok := ret.Get(0).(func() []*albumProto.AlbumCoverDataTransfer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*albumProto.AlbumCoverDataTransfer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: _a0
func (_m *UseCase) GetById(_a0 int64) (*albumProto.AlbumDataTransfer, error) {
	ret := _m.Called(_a0)

	var r0 *albumProto.AlbumDataTransfer
	if rf, ok := ret.Get(0).(func(int64) *albumProto.AlbumDataTransfer); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*albumProto.AlbumDataTransfer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCoverById provides a mock function with given fields: _a0
func (_m *UseCase) GetCoverById(_a0 int64) (*albumProto.AlbumCoverDataTransfer, error) {
	ret := _m.Called(_a0)

	var r0 *albumProto.AlbumCoverDataTransfer
	if rf, ok := ret.Get(0).(func(int64) *albumProto.AlbumCoverDataTransfer); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*albumProto.AlbumCoverDataTransfer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFavorites provides a mock function with given fields: userId
func (_m *UseCase) GetFavorites(userId int64) ([]*albumProto.AlbumDataTransfer, error) {
	ret := _m.Called(userId)

	var r0 []*albumProto.AlbumDataTransfer
	if rf, ok := ret.Get(0).(func(int64) []*albumProto.AlbumDataTransfer); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*albumProto.AlbumDataTransfer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLastCoverId provides a mock function with given fields:
func (_m *UseCase) GetLastCoverId() (int64, error) {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLastId provides a mock function with given fields:
func (_m *UseCase) GetLastId() (int64, error) {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPopular provides a mock function with given fields:
func (_m *UseCase) GetPopular() ([]*albumProto.Album, error) {
	ret := _m.Called()

	var r0 []*albumProto.Album
	if rf, ok := ret.Get(0).(func() []*albumProto.Album); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*albumProto.Album)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSize provides a mock function with given fields:
func (_m *UseCase) GetSize() (int64, error) {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveFromFavorites provides a mock function with given fields: userId, albumId
func (_m *UseCase) RemoveFromFavorites(userId int64, albumId int64) error {
	ret := _m.Called(userId, albumId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64) error); ok {
		r0 = rf(userId, albumId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SearchByTitle provides a mock function with given fields: title
func (_m *UseCase) SearchByTitle(title string) ([]*albumProto.AlbumDataTransfer, error) {
	ret := _m.Called(title)

	var r0 []*albumProto.AlbumDataTransfer
	if rf, ok := ret.Get(0).(func(string) []*albumProto.AlbumDataTransfer); ok {
		r0 = rf(title)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*albumProto.AlbumDataTransfer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0
func (_m *UseCase) Update(_a0 *albumProto.Album) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*albumProto.Album) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCover provides a mock function with given fields: _a0
func (_m *UseCase) UpdateCover(_a0 *albumProto.AlbumCover) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*albumProto.AlbumCover) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
