// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	albumProto "github.com/go-park-mail-ru/2022_1_Wave/internal/microservices/album/albumProto"

	mock "github.com/stretchr/testify/mock"
)

// AlbumRepo is an autogenerated mock type for the AlbumRepo type
type AlbumRepo struct {
	mock.Mock
}

// AddToFavorites provides a mock function with given fields: id, userId
func (_m *AlbumRepo) AddToFavorites(id int64, userId int64) error {
	ret := _m.Called(id, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64) error); ok {
		r0 = rf(id, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: _a0
func (_m *AlbumRepo) Create(_a0 *albumProto.Album) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*albumProto.Album) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: _a0
func (_m *AlbumRepo) Delete(_a0 int64) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAlbumsFromArtist provides a mock function with given fields: artist
func (_m *AlbumRepo) GetAlbumsFromArtist(artist int64) ([]*albumProto.Album, error) {
	ret := _m.Called(artist)

	var r0 []*albumProto.Album
	if rf, ok := ret.Get(0).(func(int64) []*albumProto.Album); ok {
		r0 = rf(artist)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*albumProto.Album)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(artist)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *AlbumRepo) GetAll() ([]*albumProto.Album, error) {
	ret := _m.Called()

	var r0 []*albumProto.Album
	if rf, ok := ret.Get(0).(func() []*albumProto.Album); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*albumProto.Album)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFavorites provides a mock function with given fields: userId
func (_m *AlbumRepo) GetFavorites(userId int64) ([]*albumProto.Album, error) {
	ret := _m.Called(userId)

	var r0 []*albumProto.Album
	if rf, ok := ret.Get(0).(func(int64) []*albumProto.Album); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*albumProto.Album)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLastId provides a mock function with given fields:
func (_m *AlbumRepo) GetLastId() (int64, error) {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPopular provides a mock function with given fields:
func (_m *AlbumRepo) GetPopular() ([]*albumProto.Album, error) {
	ret := _m.Called()

	var r0 []*albumProto.Album
	if rf, ok := ret.Get(0).(func() []*albumProto.Album); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*albumProto.Album)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSize provides a mock function with given fields:
func (_m *AlbumRepo) GetSize() (int64, error) {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Like provides a mock function with given fields: id, userId
func (_m *AlbumRepo) Like(id int64, userId int64) error {
	ret := _m.Called(id, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64) error); ok {
		r0 = rf(id, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Listen provides a mock function with given fields: id
func (_m *AlbumRepo) Listen(id int64) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveFromFavorites provides a mock function with given fields: albumId, userId
func (_m *AlbumRepo) RemoveFromFavorites(albumId int64, userId int64) error {
	ret := _m.Called(albumId, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64) error); ok {
		r0 = rf(albumId, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SearchByTitle provides a mock function with given fields: title
func (_m *AlbumRepo) SearchByTitle(title string) ([]*albumProto.Album, error) {
	ret := _m.Called(title)

	var r0 []*albumProto.Album
	if rf, ok := ret.Get(0).(func(string) []*albumProto.Album); ok {
		r0 = rf(title)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*albumProto.Album)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectByID provides a mock function with given fields: _a0
func (_m *AlbumRepo) SelectByID(_a0 int64) (*albumProto.Album, error) {
	ret := _m.Called(_a0)

	var r0 *albumProto.Album
	if rf, ok := ret.Get(0).(func(int64) *albumProto.Album); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*albumProto.Album)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0
func (_m *AlbumRepo) Update(_a0 *albumProto.Album) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*albumProto.Album) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
