// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	trackProto "github.com/go-park-mail-ru/2022_1_Wave/internal/microservices/track/trackProto"
	mock "github.com/stretchr/testify/mock"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// AddToFavorites provides a mock function with given fields: userId, trackId
func (_m *UseCase) AddToFavorites(userId int64, trackId int64) error {
	ret := _m.Called(userId, trackId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64) error); ok {
		r0 = rf(userId, trackId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: transfer
func (_m *UseCase) Create(transfer *trackProto.Track) error {
	ret := _m.Called(transfer)

	var r0 error
	if rf, ok := ret.Get(0).(func(*trackProto.Track) error); ok {
		r0 = rf(transfer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: _a0
func (_m *UseCase) Delete(_a0 int64) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *UseCase) GetAll() ([]*trackProto.TrackDataTransfer, error) {
	ret := _m.Called()

	var r0 []*trackProto.TrackDataTransfer
	if rf, ok := ret.Get(0).(func() []*trackProto.TrackDataTransfer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*trackProto.TrackDataTransfer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: _a0
func (_m *UseCase) GetById(_a0 int64) (*trackProto.TrackDataTransfer, error) {
	ret := _m.Called(_a0)

	var r0 *trackProto.TrackDataTransfer
	if rf, ok := ret.Get(0).(func(int64) *trackProto.TrackDataTransfer); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*trackProto.TrackDataTransfer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFavorites provides a mock function with given fields: _a0
func (_m *UseCase) GetFavorites(_a0 int64) ([]*trackProto.TrackDataTransfer, error) {
	ret := _m.Called(_a0)

	var r0 []*trackProto.TrackDataTransfer
	if rf, ok := ret.Get(0).(func(int64) []*trackProto.TrackDataTransfer); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*trackProto.TrackDataTransfer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLastId provides a mock function with given fields:
func (_m *UseCase) GetLastId() (int64, error) {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPopular provides a mock function with given fields:
func (_m *UseCase) GetPopular() ([]*trackProto.TrackDataTransfer, error) {
	ret := _m.Called()

	var r0 []*trackProto.TrackDataTransfer
	if rf, ok := ret.Get(0).(func() []*trackProto.TrackDataTransfer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*trackProto.TrackDataTransfer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPopularTracksFromArtist provides a mock function with given fields: _a0
func (_m *UseCase) GetPopularTracksFromArtist(_a0 int64) ([]*trackProto.TrackDataTransfer, error) {
	ret := _m.Called(_a0)

	var r0 []*trackProto.TrackDataTransfer
	if rf, ok := ret.Get(0).(func(int64) []*trackProto.TrackDataTransfer); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*trackProto.TrackDataTransfer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSize provides a mock function with given fields:
func (_m *UseCase) GetSize() (int64, error) {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTracksFromAlbum provides a mock function with given fields: _a0
func (_m *UseCase) GetTracksFromAlbum(_a0 int64) ([]*trackProto.TrackDataTransfer, error) {
	ret := _m.Called(_a0)

	var r0 []*trackProto.TrackDataTransfer
	if rf, ok := ret.Get(0).(func(int64) []*trackProto.TrackDataTransfer); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*trackProto.TrackDataTransfer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTracksFromPlaylist provides a mock function with given fields: playlistId
func (_m *UseCase) GetTracksFromPlaylist(playlistId int64) ([]*trackProto.TrackDataTransfer, error) {
	ret := _m.Called(playlistId)

	var r0 []*trackProto.TrackDataTransfer
	if rf, ok := ret.Get(0).(func(int64) []*trackProto.TrackDataTransfer); ok {
		r0 = rf(playlistId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*trackProto.TrackDataTransfer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(playlistId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Like provides a mock function with given fields: arg, userId
func (_m *UseCase) Like(arg int64, userId int64) error {
	ret := _m.Called(arg, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64) error); ok {
		r0 = rf(arg, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Listen provides a mock function with given fields: arg
func (_m *UseCase) Listen(arg int64) error {
	ret := _m.Called(arg)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveFromFavorites provides a mock function with given fields: userId, trackId
func (_m *UseCase) RemoveFromFavorites(userId int64, trackId int64) error {
	ret := _m.Called(userId, trackId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64) error); ok {
		r0 = rf(userId, trackId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SearchByTitle provides a mock function with given fields: arg
func (_m *UseCase) SearchByTitle(arg string) ([]*trackProto.TrackDataTransfer, error) {
	ret := _m.Called(arg)

	var r0 []*trackProto.TrackDataTransfer
	if rf, ok := ret.Get(0).(func(string) []*trackProto.TrackDataTransfer); ok {
		r0 = rf(arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*trackProto.TrackDataTransfer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: transfer
func (_m *UseCase) Update(transfer *trackProto.Track) error {
	ret := _m.Called(transfer)

	var r0 error
	if rf, ok := ret.Get(0).(func(*trackProto.Track) error); ok {
		r0 = rf(transfer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
